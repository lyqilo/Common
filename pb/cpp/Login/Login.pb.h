// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
class MsgBindPhone;
class MsgBindPhoneDefaultTypeInternal;
extern MsgBindPhoneDefaultTypeInternal _MsgBindPhone_default_instance_;
class MsgModifyBankGold;
class MsgModifyBankGoldDefaultTypeInternal;
extern MsgModifyBankGoldDefaultTypeInternal _MsgModifyBankGold_default_instance_;
class MsgModifyPassword;
class MsgModifyPasswordDefaultTypeInternal;
extern MsgModifyPasswordDefaultTypeInternal _MsgModifyPassword_default_instance_;
class MsgPlayerLogin;
class MsgPlayerLoginDefaultTypeInternal;
extern MsgPlayerLoginDefaultTypeInternal _MsgPlayerLogin_default_instance_;
class MsgPlayerLoginResp;
class MsgPlayerLoginRespDefaultTypeInternal;
extern MsgPlayerLoginRespDefaultTypeInternal _MsgPlayerLoginResp_default_instance_;
class MsgSendGold;
class MsgSendGoldDefaultTypeInternal;
extern MsgSendGoldDefaultTypeInternal _MsgSendGold_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgBindPhone* Arena::CreateMaybeMessage<::MsgBindPhone>(Arena*);
template<> ::MsgModifyBankGold* Arena::CreateMaybeMessage<::MsgModifyBankGold>(Arena*);
template<> ::MsgModifyPassword* Arena::CreateMaybeMessage<::MsgModifyPassword>(Arena*);
template<> ::MsgPlayerLogin* Arena::CreateMaybeMessage<::MsgPlayerLogin>(Arena*);
template<> ::MsgPlayerLoginResp* Arena::CreateMaybeMessage<::MsgPlayerLoginResp>(Arena*);
template<> ::MsgSendGold* Arena::CreateMaybeMessage<::MsgSendGold>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgPlayerLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerLogin) */ {
 public:
  inline MsgPlayerLogin() : MsgPlayerLogin(nullptr) {}
  virtual ~MsgPlayerLogin();

  MsgPlayerLogin(const MsgPlayerLogin& from);
  MsgPlayerLogin(MsgPlayerLogin&& from) noexcept
    : MsgPlayerLogin() {
    *this = ::std::move(from);
  }

  inline MsgPlayerLogin& operator=(const MsgPlayerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerLogin& operator=(MsgPlayerLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerLogin& default_instance();

  static inline const MsgPlayerLogin* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerLogin*>(
               &_MsgPlayerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgPlayerLogin& a, MsgPlayerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerLogin* New() const final {
    return CreateMaybeMessage<MsgPlayerLogin>(nullptr);
  }

  MsgPlayerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerLogin& from);
  void MergeFrom(const MsgPlayerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerLogin";
  }
  protected:
  explicit MsgPlayerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgPlayerLoginResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerLoginResp) */ {
 public:
  inline MsgPlayerLoginResp() : MsgPlayerLoginResp(nullptr) {}
  virtual ~MsgPlayerLoginResp();

  MsgPlayerLoginResp(const MsgPlayerLoginResp& from);
  MsgPlayerLoginResp(MsgPlayerLoginResp&& from) noexcept
    : MsgPlayerLoginResp() {
    *this = ::std::move(from);
  }

  inline MsgPlayerLoginResp& operator=(const MsgPlayerLoginResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerLoginResp& operator=(MsgPlayerLoginResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerLoginResp& default_instance();

  static inline const MsgPlayerLoginResp* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerLoginResp*>(
               &_MsgPlayerLoginResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgPlayerLoginResp& a, MsgPlayerLoginResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerLoginResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerLoginResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerLoginResp* New() const final {
    return CreateMaybeMessage<MsgPlayerLoginResp>(nullptr);
  }

  MsgPlayerLoginResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerLoginResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerLoginResp& from);
  void MergeFrom(const MsgPlayerLoginResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerLoginResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerLoginResp";
  }
  protected:
  explicit MsgPlayerLoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 4,
    kPhoneNumFieldNumber = 9,
    kResCodeFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kBeautifulIdFieldNumber = 3,
    kUserTypeFieldNumber = 5,
    kCoinFieldNumber = 6,
    kBankCoinFieldNumber = 7,
    kHeadIdFieldNumber = 8,
  };
  // string nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string phone_num = 9;
  void clear_phone_num();
  const std::string& phone_num() const;
  void set_phone_num(const std::string& value);
  void set_phone_num(std::string&& value);
  void set_phone_num(const char* value);
  void set_phone_num(const char* value, size_t size);
  std::string* mutable_phone_num();
  std::string* release_phone_num();
  void set_allocated_phone_num(std::string* phone_num);
  private:
  const std::string& _internal_phone_num() const;
  void _internal_set_phone_num(const std::string& value);
  std::string* _internal_mutable_phone_num();
  public:

  // int32 res_code = 1;
  void clear_res_code();
  ::PROTOBUF_NAMESPACE_ID::int32 res_code() const;
  void set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res_code() const;
  void _internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 3;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_type = 5;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 coin = 6;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bank_coin = 7;
  void clear_bank_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 bank_coin() const;
  void set_bank_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bank_coin() const;
  void _internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 head_id = 8;
  void clear_head_id();
  ::PROTOBUF_NAMESPACE_ID::int32 head_id() const;
  void set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head_id() const;
  void _internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerLoginResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 res_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bank_coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgModifyPassword PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgModifyPassword) */ {
 public:
  inline MsgModifyPassword() : MsgModifyPassword(nullptr) {}
  virtual ~MsgModifyPassword();

  MsgModifyPassword(const MsgModifyPassword& from);
  MsgModifyPassword(MsgModifyPassword&& from) noexcept
    : MsgModifyPassword() {
    *this = ::std::move(from);
  }

  inline MsgModifyPassword& operator=(const MsgModifyPassword& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModifyPassword& operator=(MsgModifyPassword&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgModifyPassword& default_instance();

  static inline const MsgModifyPassword* internal_default_instance() {
    return reinterpret_cast<const MsgModifyPassword*>(
               &_MsgModifyPassword_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgModifyPassword& a, MsgModifyPassword& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModifyPassword* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModifyPassword* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgModifyPassword* New() const final {
    return CreateMaybeMessage<MsgModifyPassword>(nullptr);
  }

  MsgModifyPassword* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgModifyPassword>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgModifyPassword& from);
  void MergeFrom(const MsgModifyPassword& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgModifyPassword* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgModifyPassword";
  }
  protected:
  explicit MsgModifyPassword(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldPasswordFieldNumber = 1,
    kNewPasswordFieldNumber = 2,
  };
  // string old_password = 1;
  void clear_old_password();
  const std::string& old_password() const;
  void set_old_password(const std::string& value);
  void set_old_password(std::string&& value);
  void set_old_password(const char* value);
  void set_old_password(const char* value, size_t size);
  std::string* mutable_old_password();
  std::string* release_old_password();
  void set_allocated_old_password(std::string* old_password);
  private:
  const std::string& _internal_old_password() const;
  void _internal_set_old_password(const std::string& value);
  std::string* _internal_mutable_old_password();
  public:

  // string new_password = 2;
  void clear_new_password();
  const std::string& new_password() const;
  void set_new_password(const std::string& value);
  void set_new_password(std::string&& value);
  void set_new_password(const char* value);
  void set_new_password(const char* value, size_t size);
  std::string* mutable_new_password();
  std::string* release_new_password();
  void set_allocated_new_password(std::string* new_password);
  private:
  const std::string& _internal_new_password() const;
  void _internal_set_new_password(const std::string& value);
  std::string* _internal_mutable_new_password();
  public:

  // @@protoc_insertion_point(class_scope:MsgModifyPassword)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgBindPhone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgBindPhone) */ {
 public:
  inline MsgBindPhone() : MsgBindPhone(nullptr) {}
  virtual ~MsgBindPhone();

  MsgBindPhone(const MsgBindPhone& from);
  MsgBindPhone(MsgBindPhone&& from) noexcept
    : MsgBindPhone() {
    *this = ::std::move(from);
  }

  inline MsgBindPhone& operator=(const MsgBindPhone& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBindPhone& operator=(MsgBindPhone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgBindPhone& default_instance();

  static inline const MsgBindPhone* internal_default_instance() {
    return reinterpret_cast<const MsgBindPhone*>(
               &_MsgBindPhone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgBindPhone& a, MsgBindPhone& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBindPhone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBindPhone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBindPhone* New() const final {
    return CreateMaybeMessage<MsgBindPhone>(nullptr);
  }

  MsgBindPhone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBindPhone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBindPhone& from);
  void MergeFrom(const MsgBindPhone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBindPhone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgBindPhone";
  }
  protected:
  explicit MsgBindPhone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string phone_num = 2;
  void clear_phone_num();
  const std::string& phone_num() const;
  void set_phone_num(const std::string& value);
  void set_phone_num(std::string&& value);
  void set_phone_num(const char* value);
  void set_phone_num(const char* value, size_t size);
  std::string* mutable_phone_num();
  std::string* release_phone_num();
  void set_allocated_phone_num(std::string* phone_num);
  private:
  const std::string& _internal_phone_num() const;
  void _internal_set_phone_num(const std::string& value);
  std::string* _internal_mutable_phone_num();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgBindPhone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgModifyBankGold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgModifyBankGold) */ {
 public:
  inline MsgModifyBankGold() : MsgModifyBankGold(nullptr) {}
  virtual ~MsgModifyBankGold();

  MsgModifyBankGold(const MsgModifyBankGold& from);
  MsgModifyBankGold(MsgModifyBankGold&& from) noexcept
    : MsgModifyBankGold() {
    *this = ::std::move(from);
  }

  inline MsgModifyBankGold& operator=(const MsgModifyBankGold& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgModifyBankGold& operator=(MsgModifyBankGold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgModifyBankGold& default_instance();

  static inline const MsgModifyBankGold* internal_default_instance() {
    return reinterpret_cast<const MsgModifyBankGold*>(
               &_MsgModifyBankGold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgModifyBankGold& a, MsgModifyBankGold& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgModifyBankGold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgModifyBankGold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgModifyBankGold* New() const final {
    return CreateMaybeMessage<MsgModifyBankGold>(nullptr);
  }

  MsgModifyBankGold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgModifyBankGold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgModifyBankGold& from);
  void MergeFrom(const MsgModifyBankGold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgModifyBankGold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgModifyBankGold";
  }
  protected:
  explicit MsgModifyBankGold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgModifyBankGold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class MsgSendGold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgSendGold) */ {
 public:
  inline MsgSendGold() : MsgSendGold(nullptr) {}
  virtual ~MsgSendGold();

  MsgSendGold(const MsgSendGold& from);
  MsgSendGold(MsgSendGold&& from) noexcept
    : MsgSendGold() {
    *this = ::std::move(from);
  }

  inline MsgSendGold& operator=(const MsgSendGold& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendGold& operator=(MsgSendGold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgSendGold& default_instance();

  static inline const MsgSendGold* internal_default_instance() {
    return reinterpret_cast<const MsgSendGold*>(
               &_MsgSendGold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgSendGold& a, MsgSendGold& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendGold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendGold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgSendGold* New() const final {
    return CreateMaybeMessage<MsgSendGold>(nullptr);
  }

  MsgSendGold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgSendGold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgSendGold& from);
  void MergeFrom(const MsgSendGold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendGold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgSendGold";
  }
  protected:
  explicit MsgSendGold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Login_2eproto);
    return ::descriptor_table_Login_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kBeautifulIdFieldNumber = 1,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 beautiful_id = 1;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgSendGold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgPlayerLogin

// string account = 1;
inline void MsgPlayerLogin::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& MsgPlayerLogin::account() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLogin.account)
  return _internal_account();
}
inline void MsgPlayerLogin::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLogin.account)
}
inline std::string* MsgPlayerLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLogin.account)
  return _internal_mutable_account();
}
inline const std::string& MsgPlayerLogin::_internal_account() const {
  return account_.Get();
}
inline void MsgPlayerLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLogin::set_account(std::string&& value) {
  
  account_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLogin.account)
}
inline void MsgPlayerLogin::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLogin.account)
}
inline void MsgPlayerLogin::set_account(const char* value,
    size_t size) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLogin.account)
}
inline std::string* MsgPlayerLogin::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLogin::release_account() {
  // @@protoc_insertion_point(field_release:MsgPlayerLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLogin.account)
}

// -------------------------------------------------------------------

// MsgPlayerLoginResp

// int32 res_code = 1;
inline void MsgPlayerLoginResp::clear_res_code() {
  res_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_res_code() const {
  return res_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::res_code() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.res_code)
  return _internal_res_code();
}
inline void MsgPlayerLoginResp::_internal_set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res_code_ = value;
}
inline void MsgPlayerLoginResp::set_res_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res_code(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.res_code)
}

// int32 user_id = 2;
inline void MsgPlayerLoginResp::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.user_id)
  return _internal_user_id();
}
inline void MsgPlayerLoginResp::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPlayerLoginResp::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.user_id)
}

// int32 beautiful_id = 3;
inline void MsgPlayerLoginResp::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgPlayerLoginResp::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgPlayerLoginResp::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.beautiful_id)
}

// string nickname = 4;
inline void MsgPlayerLoginResp::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.nickname)
  return _internal_nickname();
}
inline void MsgPlayerLoginResp::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.nickname)
}
inline std::string* MsgPlayerLoginResp::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgPlayerLoginResp::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.nickname)
}
inline void MsgPlayerLoginResp::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.nickname)
}
inline void MsgPlayerLoginResp::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.nickname)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.nickname)
}

// int32 user_type = 5;
inline void MsgPlayerLoginResp::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::user_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.user_type)
  return _internal_user_type();
}
inline void MsgPlayerLoginResp::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgPlayerLoginResp::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.user_type)
}

// uint64 coin = 6;
inline void MsgPlayerLoginResp::clear_coin() {
  coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.coin)
  return _internal_coin();
}
inline void MsgPlayerLoginResp::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void MsgPlayerLoginResp::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.coin)
}

// uint64 bank_coin = 7;
inline void MsgPlayerLoginResp::clear_bank_coin() {
  bank_coin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::_internal_bank_coin() const {
  return bank_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MsgPlayerLoginResp::bank_coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.bank_coin)
  return _internal_bank_coin();
}
inline void MsgPlayerLoginResp::_internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bank_coin_ = value;
}
inline void MsgPlayerLoginResp::set_bank_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bank_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.bank_coin)
}

// int32 head_id = 8;
inline void MsgPlayerLoginResp::clear_head_id() {
  head_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::_internal_head_id() const {
  return head_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerLoginResp::head_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.head_id)
  return _internal_head_id();
}
inline void MsgPlayerLoginResp::_internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  head_id_ = value;
}
inline void MsgPlayerLoginResp::set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.head_id)
}

// string phone_num = 9;
inline void MsgPlayerLoginResp::clear_phone_num() {
  phone_num_.ClearToEmpty();
}
inline const std::string& MsgPlayerLoginResp::phone_num() const {
  // @@protoc_insertion_point(field_get:MsgPlayerLoginResp.phone_num)
  return _internal_phone_num();
}
inline void MsgPlayerLoginResp::set_phone_num(const std::string& value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:MsgPlayerLoginResp.phone_num)
}
inline std::string* MsgPlayerLoginResp::mutable_phone_num() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerLoginResp.phone_num)
  return _internal_mutable_phone_num();
}
inline const std::string& MsgPlayerLoginResp::_internal_phone_num() const {
  return phone_num_.Get();
}
inline void MsgPlayerLoginResp::_internal_set_phone_num(const std::string& value) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerLoginResp::set_phone_num(std::string&& value) {
  
  phone_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerLoginResp.phone_num)
}
inline void MsgPlayerLoginResp::set_phone_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerLoginResp.phone_num)
}
inline void MsgPlayerLoginResp::set_phone_num(const char* value,
    size_t size) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerLoginResp.phone_num)
}
inline std::string* MsgPlayerLoginResp::_internal_mutable_phone_num() {
  
  return phone_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerLoginResp::release_phone_num() {
  // @@protoc_insertion_point(field_release:MsgPlayerLoginResp.phone_num)
  return phone_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerLoginResp::set_allocated_phone_num(std::string* phone_num) {
  if (phone_num != nullptr) {
    
  } else {
    
  }
  phone_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerLoginResp.phone_num)
}

// -------------------------------------------------------------------

// MsgModifyPassword

// string old_password = 1;
inline void MsgModifyPassword::clear_old_password() {
  old_password_.ClearToEmpty();
}
inline const std::string& MsgModifyPassword::old_password() const {
  // @@protoc_insertion_point(field_get:MsgModifyPassword.old_password)
  return _internal_old_password();
}
inline void MsgModifyPassword::set_old_password(const std::string& value) {
  _internal_set_old_password(value);
  // @@protoc_insertion_point(field_set:MsgModifyPassword.old_password)
}
inline std::string* MsgModifyPassword::mutable_old_password() {
  // @@protoc_insertion_point(field_mutable:MsgModifyPassword.old_password)
  return _internal_mutable_old_password();
}
inline const std::string& MsgModifyPassword::_internal_old_password() const {
  return old_password_.Get();
}
inline void MsgModifyPassword::_internal_set_old_password(const std::string& value) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgModifyPassword::set_old_password(std::string&& value) {
  
  old_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgModifyPassword.old_password)
}
inline void MsgModifyPassword::set_old_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgModifyPassword.old_password)
}
inline void MsgModifyPassword::set_old_password(const char* value,
    size_t size) {
  
  old_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgModifyPassword.old_password)
}
inline std::string* MsgModifyPassword::_internal_mutable_old_password() {
  
  return old_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgModifyPassword::release_old_password() {
  // @@protoc_insertion_point(field_release:MsgModifyPassword.old_password)
  return old_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgModifyPassword::set_allocated_old_password(std::string* old_password) {
  if (old_password != nullptr) {
    
  } else {
    
  }
  old_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), old_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgModifyPassword.old_password)
}

// string new_password = 2;
inline void MsgModifyPassword::clear_new_password() {
  new_password_.ClearToEmpty();
}
inline const std::string& MsgModifyPassword::new_password() const {
  // @@protoc_insertion_point(field_get:MsgModifyPassword.new_password)
  return _internal_new_password();
}
inline void MsgModifyPassword::set_new_password(const std::string& value) {
  _internal_set_new_password(value);
  // @@protoc_insertion_point(field_set:MsgModifyPassword.new_password)
}
inline std::string* MsgModifyPassword::mutable_new_password() {
  // @@protoc_insertion_point(field_mutable:MsgModifyPassword.new_password)
  return _internal_mutable_new_password();
}
inline const std::string& MsgModifyPassword::_internal_new_password() const {
  return new_password_.Get();
}
inline void MsgModifyPassword::_internal_set_new_password(const std::string& value) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgModifyPassword::set_new_password(std::string&& value) {
  
  new_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgModifyPassword.new_password)
}
inline void MsgModifyPassword::set_new_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgModifyPassword.new_password)
}
inline void MsgModifyPassword::set_new_password(const char* value,
    size_t size) {
  
  new_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgModifyPassword.new_password)
}
inline std::string* MsgModifyPassword::_internal_mutable_new_password() {
  
  return new_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgModifyPassword::release_new_password() {
  // @@protoc_insertion_point(field_release:MsgModifyPassword.new_password)
  return new_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgModifyPassword::set_allocated_new_password(std::string* new_password) {
  if (new_password != nullptr) {
    
  } else {
    
  }
  new_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgModifyPassword.new_password)
}

// -------------------------------------------------------------------

// MsgBindPhone

// int32 code = 1;
inline void MsgBindPhone::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBindPhone::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgBindPhone::code() const {
  // @@protoc_insertion_point(field_get:MsgBindPhone.code)
  return _internal_code();
}
inline void MsgBindPhone::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void MsgBindPhone::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:MsgBindPhone.code)
}

// string phone_num = 2;
inline void MsgBindPhone::clear_phone_num() {
  phone_num_.ClearToEmpty();
}
inline const std::string& MsgBindPhone::phone_num() const {
  // @@protoc_insertion_point(field_get:MsgBindPhone.phone_num)
  return _internal_phone_num();
}
inline void MsgBindPhone::set_phone_num(const std::string& value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:MsgBindPhone.phone_num)
}
inline std::string* MsgBindPhone::mutable_phone_num() {
  // @@protoc_insertion_point(field_mutable:MsgBindPhone.phone_num)
  return _internal_mutable_phone_num();
}
inline const std::string& MsgBindPhone::_internal_phone_num() const {
  return phone_num_.Get();
}
inline void MsgBindPhone::_internal_set_phone_num(const std::string& value) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgBindPhone::set_phone_num(std::string&& value) {
  
  phone_num_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgBindPhone.phone_num)
}
inline void MsgBindPhone::set_phone_num(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgBindPhone.phone_num)
}
inline void MsgBindPhone::set_phone_num(const char* value,
    size_t size) {
  
  phone_num_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgBindPhone.phone_num)
}
inline std::string* MsgBindPhone::_internal_mutable_phone_num() {
  
  return phone_num_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgBindPhone::release_phone_num() {
  // @@protoc_insertion_point(field_release:MsgBindPhone.phone_num)
  return phone_num_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgBindPhone::set_allocated_phone_num(std::string* phone_num) {
  if (phone_num != nullptr) {
    
  } else {
    
  }
  phone_num_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone_num,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgBindPhone.phone_num)
}

// -------------------------------------------------------------------

// MsgModifyBankGold

// int32 type = 1;
inline void MsgModifyBankGold::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgModifyBankGold::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgModifyBankGold::type() const {
  // @@protoc_insertion_point(field_get:MsgModifyBankGold.type)
  return _internal_type();
}
inline void MsgModifyBankGold::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void MsgModifyBankGold::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MsgModifyBankGold.type)
}

// int64 gold = 2;
inline void MsgModifyBankGold::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgModifyBankGold::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgModifyBankGold::gold() const {
  // @@protoc_insertion_point(field_get:MsgModifyBankGold.gold)
  return _internal_gold();
}
inline void MsgModifyBankGold::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgModifyBankGold::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgModifyBankGold.gold)
}

// -------------------------------------------------------------------

// MsgSendGold

// int32 beautiful_id = 1;
inline void MsgSendGold::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendGold::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgSendGold::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgSendGold.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgSendGold::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgSendGold::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgSendGold.beautiful_id)
}

// int64 gold = 2;
inline void MsgSendGold::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgSendGold::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgSendGold::gold() const {
  // @@protoc_insertion_point(field_get:MsgSendGold.gold)
  return _internal_gold();
}
inline void MsgSendGold::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgSendGold::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgSendGold.gold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
