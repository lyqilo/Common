// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternalProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerInternalProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerInternalProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerInternalProto_2eproto;
class MsgDBLoginOut;
class MsgDBLoginOutDefaultTypeInternal;
extern MsgDBLoginOutDefaultTypeInternal _MsgDBLoginOut_default_instance_;
class MsgDBRegisterLogin;
class MsgDBRegisterLoginDefaultTypeInternal;
extern MsgDBRegisterLoginDefaultTypeInternal _MsgDBRegisterLogin_default_instance_;
class MsgDBUpdateOnlineNum;
class MsgDBUpdateOnlineNumDefaultTypeInternal;
extern MsgDBUpdateOnlineNumDefaultTypeInternal _MsgDBUpdateOnlineNum_default_instance_;
class MsgDBUpdatePlayerInfo;
class MsgDBUpdatePlayerInfoDefaultTypeInternal;
extern MsgDBUpdatePlayerInfoDefaultTypeInternal _MsgDBUpdatePlayerInfo_default_instance_;
class MsgPlayerAttribute;
class MsgPlayerAttributeDefaultTypeInternal;
extern MsgPlayerAttributeDefaultTypeInternal _MsgPlayerAttribute_default_instance_;
class MsgPlayerInfo;
class MsgPlayerInfoDefaultTypeInternal;
extern MsgPlayerInfoDefaultTypeInternal _MsgPlayerInfo_default_instance_;
class MsgRegisterServer;
class MsgRegisterServerDefaultTypeInternal;
extern MsgRegisterServerDefaultTypeInternal _MsgRegisterServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgDBLoginOut* Arena::CreateMaybeMessage<::MsgDBLoginOut>(Arena*);
template<> ::MsgDBRegisterLogin* Arena::CreateMaybeMessage<::MsgDBRegisterLogin>(Arena*);
template<> ::MsgDBUpdateOnlineNum* Arena::CreateMaybeMessage<::MsgDBUpdateOnlineNum>(Arena*);
template<> ::MsgDBUpdatePlayerInfo* Arena::CreateMaybeMessage<::MsgDBUpdatePlayerInfo>(Arena*);
template<> ::MsgPlayerAttribute* Arena::CreateMaybeMessage<::MsgPlayerAttribute>(Arena*);
template<> ::MsgPlayerInfo* Arena::CreateMaybeMessage<::MsgPlayerInfo>(Arena*);
template<> ::MsgRegisterServer* Arena::CreateMaybeMessage<::MsgRegisterServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgRegisterServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgRegisterServer) */ {
 public:
  inline MsgRegisterServer() : MsgRegisterServer(nullptr) {}
  virtual ~MsgRegisterServer();

  MsgRegisterServer(const MsgRegisterServer& from);
  MsgRegisterServer(MsgRegisterServer&& from) noexcept
    : MsgRegisterServer() {
    *this = ::std::move(from);
  }

  inline MsgRegisterServer& operator=(const MsgRegisterServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRegisterServer& operator=(MsgRegisterServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRegisterServer& default_instance();

  static inline const MsgRegisterServer* internal_default_instance() {
    return reinterpret_cast<const MsgRegisterServer*>(
               &_MsgRegisterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRegisterServer& a, MsgRegisterServer& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRegisterServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRegisterServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRegisterServer* New() const final {
    return CreateMaybeMessage<MsgRegisterServer>(nullptr);
  }

  MsgRegisterServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRegisterServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRegisterServer& from);
  void MergeFrom(const MsgRegisterServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRegisterServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgRegisterServer";
  }
  protected:
  explicit MsgRegisterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgRegisterServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBUpdateOnlineNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBUpdateOnlineNum) */ {
 public:
  inline MsgDBUpdateOnlineNum() : MsgDBUpdateOnlineNum(nullptr) {}
  virtual ~MsgDBUpdateOnlineNum();

  MsgDBUpdateOnlineNum(const MsgDBUpdateOnlineNum& from);
  MsgDBUpdateOnlineNum(MsgDBUpdateOnlineNum&& from) noexcept
    : MsgDBUpdateOnlineNum() {
    *this = ::std::move(from);
  }

  inline MsgDBUpdateOnlineNum& operator=(const MsgDBUpdateOnlineNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBUpdateOnlineNum& operator=(MsgDBUpdateOnlineNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBUpdateOnlineNum& default_instance();

  static inline const MsgDBUpdateOnlineNum* internal_default_instance() {
    return reinterpret_cast<const MsgDBUpdateOnlineNum*>(
               &_MsgDBUpdateOnlineNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgDBUpdateOnlineNum& a, MsgDBUpdateOnlineNum& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBUpdateOnlineNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBUpdateOnlineNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBUpdateOnlineNum* New() const final {
    return CreateMaybeMessage<MsgDBUpdateOnlineNum>(nullptr);
  }

  MsgDBUpdateOnlineNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBUpdateOnlineNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBUpdateOnlineNum& from);
  void MergeFrom(const MsgDBUpdateOnlineNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBUpdateOnlineNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBUpdateOnlineNum";
  }
  protected:
  explicit MsgDBUpdateOnlineNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPortFieldNumber = 2,
    kOnlineNumFieldNumber = 3,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_num = 3;
  void clear_online_num();
  ::PROTOBUF_NAMESPACE_ID::int32 online_num() const;
  void set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_num() const;
  void _internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBUpdateOnlineNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBRegisterLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBRegisterLogin) */ {
 public:
  inline MsgDBRegisterLogin() : MsgDBRegisterLogin(nullptr) {}
  virtual ~MsgDBRegisterLogin();

  MsgDBRegisterLogin(const MsgDBRegisterLogin& from);
  MsgDBRegisterLogin(MsgDBRegisterLogin&& from) noexcept
    : MsgDBRegisterLogin() {
    *this = ::std::move(from);
  }

  inline MsgDBRegisterLogin& operator=(const MsgDBRegisterLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBRegisterLogin& operator=(MsgDBRegisterLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBRegisterLogin& default_instance();

  static inline const MsgDBRegisterLogin* internal_default_instance() {
    return reinterpret_cast<const MsgDBRegisterLogin*>(
               &_MsgDBRegisterLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgDBRegisterLogin& a, MsgDBRegisterLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBRegisterLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBRegisterLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBRegisterLogin* New() const final {
    return CreateMaybeMessage<MsgDBRegisterLogin>(nullptr);
  }

  MsgDBRegisterLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBRegisterLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBRegisterLogin& from);
  void MergeFrom(const MsgDBRegisterLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBRegisterLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBRegisterLogin";
  }
  protected:
  explicit MsgDBRegisterLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBRegisterLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgPlayerAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerAttribute) */ {
 public:
  inline MsgPlayerAttribute() : MsgPlayerAttribute(nullptr) {}
  virtual ~MsgPlayerAttribute();

  MsgPlayerAttribute(const MsgPlayerAttribute& from);
  MsgPlayerAttribute(MsgPlayerAttribute&& from) noexcept
    : MsgPlayerAttribute() {
    *this = ::std::move(from);
  }

  inline MsgPlayerAttribute& operator=(const MsgPlayerAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerAttribute& operator=(MsgPlayerAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerAttribute& default_instance();

  static inline const MsgPlayerAttribute* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerAttribute*>(
               &_MsgPlayerAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgPlayerAttribute& a, MsgPlayerAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerAttribute* New() const final {
    return CreateMaybeMessage<MsgPlayerAttribute>(nullptr);
  }

  MsgPlayerAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerAttribute& from);
  void MergeFrom(const MsgPlayerAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerAttribute";
  }
  protected:
  explicit MsgPlayerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 4,
    kNicknameFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kCoinFieldNumber = 5,
    kUserTypeFieldNumber = 3,
    kHeadIdFieldNumber = 7,
    kBankCoinFieldNumber = 6,
  };
  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string nickname = 8;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 coin = 5;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 user_type = 3;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 head_id = 7;
  void clear_head_id();
  ::PROTOBUF_NAMESPACE_ID::int32 head_id() const;
  void set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head_id() const;
  void _internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 bank_coin = 6;
  void clear_bank_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 bank_coin() const;
  void set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bank_coin() const;
  void _internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 bank_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerInfo) */ {
 public:
  inline MsgPlayerInfo() : MsgPlayerInfo(nullptr) {}
  virtual ~MsgPlayerInfo();

  MsgPlayerInfo(const MsgPlayerInfo& from);
  MsgPlayerInfo(MsgPlayerInfo&& from) noexcept
    : MsgPlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgPlayerInfo& operator=(const MsgPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerInfo& operator=(MsgPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerInfo& default_instance();

  static inline const MsgPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerInfo*>(
               &_MsgPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgPlayerInfo& a, MsgPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerInfo* New() const final {
    return CreateMaybeMessage<MsgPlayerInfo>(nullptr);
  }

  MsgPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerInfo& from);
  void MergeFrom(const MsgPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerInfo";
  }
  protected:
  explicit MsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAttributeFieldNumber = 1,
  };
  // .MsgPlayerAttribute player_attribute = 1;
  bool has_player_attribute() const;
  private:
  bool _internal_has_player_attribute() const;
  public:
  void clear_player_attribute();
  const ::MsgPlayerAttribute& player_attribute() const;
  ::MsgPlayerAttribute* release_player_attribute();
  ::MsgPlayerAttribute* mutable_player_attribute();
  void set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute);
  private:
  const ::MsgPlayerAttribute& _internal_player_attribute() const;
  ::MsgPlayerAttribute* _internal_mutable_player_attribute();
  public:
  void unsafe_arena_set_allocated_player_attribute(
      ::MsgPlayerAttribute* player_attribute);
  ::MsgPlayerAttribute* unsafe_arena_release_player_attribute();

  // @@protoc_insertion_point(class_scope:MsgPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MsgPlayerAttribute* player_attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBLoginOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBLoginOut) */ {
 public:
  inline MsgDBLoginOut() : MsgDBLoginOut(nullptr) {}
  virtual ~MsgDBLoginOut();

  MsgDBLoginOut(const MsgDBLoginOut& from);
  MsgDBLoginOut(MsgDBLoginOut&& from) noexcept
    : MsgDBLoginOut() {
    *this = ::std::move(from);
  }

  inline MsgDBLoginOut& operator=(const MsgDBLoginOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBLoginOut& operator=(MsgDBLoginOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBLoginOut& default_instance();

  static inline const MsgDBLoginOut* internal_default_instance() {
    return reinterpret_cast<const MsgDBLoginOut*>(
               &_MsgDBLoginOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgDBLoginOut& a, MsgDBLoginOut& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBLoginOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBLoginOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBLoginOut* New() const final {
    return CreateMaybeMessage<MsgDBLoginOut>(nullptr);
  }

  MsgDBLoginOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBLoginOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBLoginOut& from);
  void MergeFrom(const MsgDBLoginOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBLoginOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBLoginOut";
  }
  protected:
  explicit MsgDBLoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOnlineTimeFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_time = 2;
  void clear_online_time();
  ::PROTOBUF_NAMESPACE_ID::int32 online_time() const;
  void set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_time() const;
  void _internal_set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBLoginOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBUpdatePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBUpdatePlayerInfo) */ {
 public:
  inline MsgDBUpdatePlayerInfo() : MsgDBUpdatePlayerInfo(nullptr) {}
  virtual ~MsgDBUpdatePlayerInfo();

  MsgDBUpdatePlayerInfo(const MsgDBUpdatePlayerInfo& from);
  MsgDBUpdatePlayerInfo(MsgDBUpdatePlayerInfo&& from) noexcept
    : MsgDBUpdatePlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgDBUpdatePlayerInfo& operator=(const MsgDBUpdatePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBUpdatePlayerInfo& operator=(MsgDBUpdatePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBUpdatePlayerInfo& default_instance();

  static inline const MsgDBUpdatePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgDBUpdatePlayerInfo*>(
               &_MsgDBUpdatePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgDBUpdatePlayerInfo& a, MsgDBUpdatePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBUpdatePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBUpdatePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBUpdatePlayerInfo* New() const final {
    return CreateMaybeMessage<MsgDBUpdatePlayerInfo>(nullptr);
  }

  MsgDBUpdatePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBUpdatePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBUpdatePlayerInfo& from);
  void MergeFrom(const MsgDBUpdatePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBUpdatePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBUpdatePlayerInfo";
  }
  protected:
  explicit MsgDBUpdatePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 4,
    kNicknameFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kHeadIdFieldNumber = 5,
  };
  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string nickname = 6;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_type = 3;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 head_id = 5;
  void clear_head_id();
  ::PROTOBUF_NAMESPACE_ID::int32 head_id() const;
  void set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head_id() const;
  void _internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBUpdatePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgRegisterServer

// int32 ip = 1;
inline void MsgRegisterServer::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::ip() const {
  // @@protoc_insertion_point(field_get:MsgRegisterServer.ip)
  return _internal_ip();
}
inline void MsgRegisterServer::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void MsgRegisterServer::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:MsgRegisterServer.ip)
}

// int32 port = 2;
inline void MsgRegisterServer::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::port() const {
  // @@protoc_insertion_point(field_get:MsgRegisterServer.port)
  return _internal_port();
}
inline void MsgRegisterServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgRegisterServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgRegisterServer.port)
}

// int32 server_id = 3;
inline void MsgRegisterServer::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterServer::server_id() const {
  // @@protoc_insertion_point(field_get:MsgRegisterServer.server_id)
  return _internal_server_id();
}
inline void MsgRegisterServer::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgRegisterServer::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgRegisterServer.server_id)
}

// -------------------------------------------------------------------

// MsgDBUpdateOnlineNum

// int32 server_id = 1;
inline void MsgDBUpdateOnlineNum::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::server_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.server_id)
  return _internal_server_id();
}
inline void MsgDBUpdateOnlineNum::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgDBUpdateOnlineNum::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.server_id)
}

// int32 port = 2;
inline void MsgDBUpdateOnlineNum::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::port() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.port)
  return _internal_port();
}
inline void MsgDBUpdateOnlineNum::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgDBUpdateOnlineNum::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.port)
}

// int32 online_num = 3;
inline void MsgDBUpdateOnlineNum::clear_online_num() {
  online_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_online_num() const {
  return online_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::online_num() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.online_num)
  return _internal_online_num();
}
inline void MsgDBUpdateOnlineNum::_internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_num_ = value;
}
inline void MsgDBUpdateOnlineNum::set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_num(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.online_num)
}

// -------------------------------------------------------------------

// MsgDBRegisterLogin

// int32 server_id = 1;
inline void MsgDBRegisterLogin::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::server_id() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterLogin.server_id)
  return _internal_server_id();
}
inline void MsgDBRegisterLogin::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgDBRegisterLogin::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterLogin.server_id)
}

// int32 port = 2;
inline void MsgDBRegisterLogin::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::port() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterLogin.port)
  return _internal_port();
}
inline void MsgDBRegisterLogin::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgDBRegisterLogin::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterLogin.port)
}

// -------------------------------------------------------------------

// MsgPlayerAttribute

// int32 user_id = 1;
inline void MsgPlayerAttribute::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.user_id)
  return _internal_user_id();
}
inline void MsgPlayerAttribute::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPlayerAttribute::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.user_id)
}

// int32 beautiful_id = 2;
inline void MsgPlayerAttribute::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgPlayerAttribute::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgPlayerAttribute::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.beautiful_id)
}

// int32 user_type = 3;
inline void MsgPlayerAttribute::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::user_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.user_type)
  return _internal_user_type();
}
inline void MsgPlayerAttribute::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgPlayerAttribute::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.user_type)
}

// string phone = 4;
inline void MsgPlayerAttribute::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& MsgPlayerAttribute::phone() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.phone)
  return _internal_phone();
}
inline void MsgPlayerAttribute::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.phone)
}
inline std::string* MsgPlayerAttribute::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerAttribute.phone)
  return _internal_mutable_phone();
}
inline const std::string& MsgPlayerAttribute::_internal_phone() const {
  return phone_.Get();
}
inline void MsgPlayerAttribute::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerAttribute::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerAttribute.phone)
}
inline void MsgPlayerAttribute::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerAttribute.phone)
}
inline void MsgPlayerAttribute::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerAttribute.phone)
}
inline std::string* MsgPlayerAttribute::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerAttribute::release_phone() {
  // @@protoc_insertion_point(field_release:MsgPlayerAttribute.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerAttribute::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerAttribute.phone)
}

// int64 coin = 5;
inline void MsgPlayerAttribute::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.coin)
  return _internal_coin();
}
inline void MsgPlayerAttribute::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void MsgPlayerAttribute::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.coin)
}

// int64 bank_coin = 6;
inline void MsgPlayerAttribute::clear_bank_coin() {
  bank_coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::_internal_bank_coin() const {
  return bank_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::bank_coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.bank_coin)
  return _internal_bank_coin();
}
inline void MsgPlayerAttribute::_internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bank_coin_ = value;
}
inline void MsgPlayerAttribute::set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bank_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.bank_coin)
}

// int32 head_id = 7;
inline void MsgPlayerAttribute::clear_head_id() {
  head_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_head_id() const {
  return head_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::head_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.head_id)
  return _internal_head_id();
}
inline void MsgPlayerAttribute::_internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  head_id_ = value;
}
inline void MsgPlayerAttribute::set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.head_id)
}

// string nickname = 8;
inline void MsgPlayerAttribute::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgPlayerAttribute::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.nickname)
  return _internal_nickname();
}
inline void MsgPlayerAttribute::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.nickname)
}
inline std::string* MsgPlayerAttribute::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerAttribute.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgPlayerAttribute::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgPlayerAttribute::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerAttribute::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerAttribute.nickname)
}
inline void MsgPlayerAttribute::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerAttribute.nickname)
}
inline void MsgPlayerAttribute::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerAttribute.nickname)
}
inline std::string* MsgPlayerAttribute::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerAttribute::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgPlayerAttribute.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerAttribute::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerAttribute.nickname)
}

// -------------------------------------------------------------------

// MsgPlayerInfo

// .MsgPlayerAttribute player_attribute = 1;
inline bool MsgPlayerInfo::_internal_has_player_attribute() const {
  return this != internal_default_instance() && player_attribute_ != nullptr;
}
inline bool MsgPlayerInfo::has_player_attribute() const {
  return _internal_has_player_attribute();
}
inline void MsgPlayerInfo::clear_player_attribute() {
  if (GetArena() == nullptr && player_attribute_ != nullptr) {
    delete player_attribute_;
  }
  player_attribute_ = nullptr;
}
inline const ::MsgPlayerAttribute& MsgPlayerInfo::_internal_player_attribute() const {
  const ::MsgPlayerAttribute* p = player_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgPlayerAttribute&>(
      ::_MsgPlayerAttribute_default_instance_);
}
inline const ::MsgPlayerAttribute& MsgPlayerInfo::player_attribute() const {
  // @@protoc_insertion_point(field_get:MsgPlayerInfo.player_attribute)
  return _internal_player_attribute();
}
inline void MsgPlayerInfo::unsafe_arena_set_allocated_player_attribute(
    ::MsgPlayerAttribute* player_attribute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_attribute_);
  }
  player_attribute_ = player_attribute;
  if (player_attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MsgPlayerInfo.player_attribute)
}
inline ::MsgPlayerAttribute* MsgPlayerInfo::release_player_attribute() {
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MsgPlayerAttribute* MsgPlayerInfo::unsafe_arena_release_player_attribute() {
  // @@protoc_insertion_point(field_release:MsgPlayerInfo.player_attribute)
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  return temp;
}
inline ::MsgPlayerAttribute* MsgPlayerInfo::_internal_mutable_player_attribute() {
  
  if (player_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgPlayerAttribute>(GetArena());
    player_attribute_ = p;
  }
  return player_attribute_;
}
inline ::MsgPlayerAttribute* MsgPlayerInfo::mutable_player_attribute() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerInfo.player_attribute)
  return _internal_mutable_player_attribute();
}
inline void MsgPlayerInfo::set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_attribute_;
  }
  if (player_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_attribute);
    if (message_arena != submessage_arena) {
      player_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_attribute, submessage_arena);
    }
    
  } else {
    
  }
  player_attribute_ = player_attribute;
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerInfo.player_attribute)
}

// -------------------------------------------------------------------

// MsgDBLoginOut

// int32 user_id = 1;
inline void MsgDBLoginOut::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBLoginOut.user_id)
  return _internal_user_id();
}
inline void MsgDBLoginOut::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBLoginOut::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBLoginOut.user_id)
}

// int32 online_time = 2;
inline void MsgDBLoginOut::clear_online_time() {
  online_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::_internal_online_time() const {
  return online_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::online_time() const {
  // @@protoc_insertion_point(field_get:MsgDBLoginOut.online_time)
  return _internal_online_time();
}
inline void MsgDBLoginOut::_internal_set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_time_ = value;
}
inline void MsgDBLoginOut::set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_time(value);
  // @@protoc_insertion_point(field_set:MsgDBLoginOut.online_time)
}

// -------------------------------------------------------------------

// MsgDBUpdatePlayerInfo

// int32 user_id = 1;
inline void MsgDBUpdatePlayerInfo::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.user_id)
  return _internal_user_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.user_id)
}

// int32 beautiful_id = 2;
inline void MsgDBUpdatePlayerInfo::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.beautiful_id)
}

// int32 user_type = 3;
inline void MsgDBUpdatePlayerInfo::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::user_type() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.user_type)
  return _internal_user_type();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.user_type)
}

// string phone = 4;
inline void MsgDBUpdatePlayerInfo::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::phone() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.phone)
  return _internal_phone();
}
inline void MsgDBUpdatePlayerInfo::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.phone)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.phone)
  return _internal_mutable_phone();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_phone() const {
  return phone_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.phone)
}
inline void MsgDBUpdatePlayerInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.phone)
}
inline void MsgDBUpdatePlayerInfo::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.phone)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_phone() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.phone)
}

// int32 head_id = 5;
inline void MsgDBUpdatePlayerInfo::clear_head_id() {
  head_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_head_id() const {
  return head_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::head_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.head_id)
  return _internal_head_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  head_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.head_id)
}

// string nickname = 6;
inline void MsgDBUpdatePlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.nickname)
  return _internal_nickname();
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.nickname)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.nickname)
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.nickname)
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.nickname)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.nickname)
}

// string password = 7;
inline void MsgDBUpdatePlayerInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.password)
  return _internal_password();
}
inline void MsgDBUpdatePlayerInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.password)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.password)
  return _internal_mutable_password();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_password() const {
  return password_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.password)
}
inline void MsgDBUpdatePlayerInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.password)
}
inline void MsgDBUpdatePlayerInfo::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.password)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.password)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto
