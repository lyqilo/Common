// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternalProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerInternalProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerInternalProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerInternalProto_2eproto;
class MsgApplyRobot;
class MsgApplyRobotDefaultTypeInternal;
extern MsgApplyRobotDefaultTypeInternal _MsgApplyRobot_default_instance_;
class MsgApplyRobotResp;
class MsgApplyRobotRespDefaultTypeInternal;
extern MsgApplyRobotRespDefaultTypeInternal _MsgApplyRobotResp_default_instance_;
class MsgCreateRobot;
class MsgCreateRobotDefaultTypeInternal;
extern MsgCreateRobotDefaultTypeInternal _MsgCreateRobot_default_instance_;
class MsgCreateRobotResp;
class MsgCreateRobotRespDefaultTypeInternal;
extern MsgCreateRobotRespDefaultTypeInternal _MsgCreateRobotResp_default_instance_;
class MsgDBLoadRobot;
class MsgDBLoadRobotDefaultTypeInternal;
extern MsgDBLoadRobotDefaultTypeInternal _MsgDBLoadRobot_default_instance_;
class MsgDBLoginOut;
class MsgDBLoginOutDefaultTypeInternal;
extern MsgDBLoginOutDefaultTypeInternal _MsgDBLoginOut_default_instance_;
class MsgDBMail;
class MsgDBMailDefaultTypeInternal;
extern MsgDBMailDefaultTypeInternal _MsgDBMail_default_instance_;
class MsgDBMailData;
class MsgDBMailDataDefaultTypeInternal;
extern MsgDBMailDataDefaultTypeInternal _MsgDBMailData_default_instance_;
class MsgDBModifyBankGold;
class MsgDBModifyBankGoldDefaultTypeInternal;
extern MsgDBModifyBankGoldDefaultTypeInternal _MsgDBModifyBankGold_default_instance_;
class MsgDBRegisterGame;
class MsgDBRegisterGameDefaultTypeInternal;
extern MsgDBRegisterGameDefaultTypeInternal _MsgDBRegisterGame_default_instance_;
class MsgDBRegisterLogin;
class MsgDBRegisterLoginDefaultTypeInternal;
extern MsgDBRegisterLoginDefaultTypeInternal _MsgDBRegisterLogin_default_instance_;
class MsgDBSendUserGold;
class MsgDBSendUserGoldDefaultTypeInternal;
extern MsgDBSendUserGoldDefaultTypeInternal _MsgDBSendUserGold_default_instance_;
class MsgDBUpdateOnlineNum;
class MsgDBUpdateOnlineNumDefaultTypeInternal;
extern MsgDBUpdateOnlineNumDefaultTypeInternal _MsgDBUpdateOnlineNum_default_instance_;
class MsgDBUpdatePlayerInfo;
class MsgDBUpdatePlayerInfoDefaultTypeInternal;
extern MsgDBUpdatePlayerInfoDefaultTypeInternal _MsgDBUpdatePlayerInfo_default_instance_;
class MsgGamePlayerInfo;
class MsgGamePlayerInfoDefaultTypeInternal;
extern MsgGamePlayerInfoDefaultTypeInternal _MsgGamePlayerInfo_default_instance_;
class MsgLoginPlayerInfo;
class MsgLoginPlayerInfoDefaultTypeInternal;
extern MsgLoginPlayerInfoDefaultTypeInternal _MsgLoginPlayerInfo_default_instance_;
class MsgPlayerAttribute;
class MsgPlayerAttributeDefaultTypeInternal;
extern MsgPlayerAttributeDefaultTypeInternal _MsgPlayerAttribute_default_instance_;
class MsgRegisterGameServer;
class MsgRegisterGameServerDefaultTypeInternal;
extern MsgRegisterGameServerDefaultTypeInternal _MsgRegisterGameServer_default_instance_;
class MsgRegisterLoginServer;
class MsgRegisterLoginServerDefaultTypeInternal;
extern MsgRegisterLoginServerDefaultTypeInternal _MsgRegisterLoginServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MsgApplyRobot* Arena::CreateMaybeMessage<::MsgApplyRobot>(Arena*);
template<> ::MsgApplyRobotResp* Arena::CreateMaybeMessage<::MsgApplyRobotResp>(Arena*);
template<> ::MsgCreateRobot* Arena::CreateMaybeMessage<::MsgCreateRobot>(Arena*);
template<> ::MsgCreateRobotResp* Arena::CreateMaybeMessage<::MsgCreateRobotResp>(Arena*);
template<> ::MsgDBLoadRobot* Arena::CreateMaybeMessage<::MsgDBLoadRobot>(Arena*);
template<> ::MsgDBLoginOut* Arena::CreateMaybeMessage<::MsgDBLoginOut>(Arena*);
template<> ::MsgDBMail* Arena::CreateMaybeMessage<::MsgDBMail>(Arena*);
template<> ::MsgDBMailData* Arena::CreateMaybeMessage<::MsgDBMailData>(Arena*);
template<> ::MsgDBModifyBankGold* Arena::CreateMaybeMessage<::MsgDBModifyBankGold>(Arena*);
template<> ::MsgDBRegisterGame* Arena::CreateMaybeMessage<::MsgDBRegisterGame>(Arena*);
template<> ::MsgDBRegisterLogin* Arena::CreateMaybeMessage<::MsgDBRegisterLogin>(Arena*);
template<> ::MsgDBSendUserGold* Arena::CreateMaybeMessage<::MsgDBSendUserGold>(Arena*);
template<> ::MsgDBUpdateOnlineNum* Arena::CreateMaybeMessage<::MsgDBUpdateOnlineNum>(Arena*);
template<> ::MsgDBUpdatePlayerInfo* Arena::CreateMaybeMessage<::MsgDBUpdatePlayerInfo>(Arena*);
template<> ::MsgGamePlayerInfo* Arena::CreateMaybeMessage<::MsgGamePlayerInfo>(Arena*);
template<> ::MsgLoginPlayerInfo* Arena::CreateMaybeMessage<::MsgLoginPlayerInfo>(Arena*);
template<> ::MsgPlayerAttribute* Arena::CreateMaybeMessage<::MsgPlayerAttribute>(Arena*);
template<> ::MsgRegisterGameServer* Arena::CreateMaybeMessage<::MsgRegisterGameServer>(Arena*);
template<> ::MsgRegisterLoginServer* Arena::CreateMaybeMessage<::MsgRegisterLoginServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MsgRegisterLoginServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgRegisterLoginServer) */ {
 public:
  inline MsgRegisterLoginServer() : MsgRegisterLoginServer(nullptr) {}
  virtual ~MsgRegisterLoginServer();

  MsgRegisterLoginServer(const MsgRegisterLoginServer& from);
  MsgRegisterLoginServer(MsgRegisterLoginServer&& from) noexcept
    : MsgRegisterLoginServer() {
    *this = ::std::move(from);
  }

  inline MsgRegisterLoginServer& operator=(const MsgRegisterLoginServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRegisterLoginServer& operator=(MsgRegisterLoginServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRegisterLoginServer& default_instance();

  static inline const MsgRegisterLoginServer* internal_default_instance() {
    return reinterpret_cast<const MsgRegisterLoginServer*>(
               &_MsgRegisterLoginServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRegisterLoginServer& a, MsgRegisterLoginServer& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRegisterLoginServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRegisterLoginServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRegisterLoginServer* New() const final {
    return CreateMaybeMessage<MsgRegisterLoginServer>(nullptr);
  }

  MsgRegisterLoginServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRegisterLoginServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRegisterLoginServer& from);
  void MergeFrom(const MsgRegisterLoginServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRegisterLoginServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgRegisterLoginServer";
  }
  protected:
  explicit MsgRegisterLoginServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
  };
  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgRegisterLoginServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgRegisterGameServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgRegisterGameServer) */ {
 public:
  inline MsgRegisterGameServer() : MsgRegisterGameServer(nullptr) {}
  virtual ~MsgRegisterGameServer();

  MsgRegisterGameServer(const MsgRegisterGameServer& from);
  MsgRegisterGameServer(MsgRegisterGameServer&& from) noexcept
    : MsgRegisterGameServer() {
    *this = ::std::move(from);
  }

  inline MsgRegisterGameServer& operator=(const MsgRegisterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRegisterGameServer& operator=(MsgRegisterGameServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRegisterGameServer& default_instance();

  static inline const MsgRegisterGameServer* internal_default_instance() {
    return reinterpret_cast<const MsgRegisterGameServer*>(
               &_MsgRegisterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgRegisterGameServer& a, MsgRegisterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRegisterGameServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRegisterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRegisterGameServer* New() const final {
    return CreateMaybeMessage<MsgRegisterGameServer>(nullptr);
  }

  MsgRegisterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRegisterGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRegisterGameServer& from);
  void MergeFrom(const MsgRegisterGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRegisterGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgRegisterGameServer";
  }
  protected:
  explicit MsgRegisterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 8,
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kKindIdFieldNumber = 4,
    kRoomLevelFieldNumber = 5,
    kLimitGoldFieldNumber = 6,
    kMaxPlayerFieldNumber = 7,
  };
  // string room_name = 8;
  void clear_room_name();
  const std::string& room_name() const;
  void set_room_name(const std::string& value);
  void set_room_name(std::string&& value);
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  std::string* mutable_room_name();
  std::string* release_room_name();
  void set_allocated_room_name(std::string* room_name);
  private:
  const std::string& _internal_room_name() const;
  void _internal_set_room_name(const std::string& value);
  std::string* _internal_mutable_room_name();
  public:

  // int32 ip = 1;
  void clear_ip();
  ::PROTOBUF_NAMESPACE_ID::int32 ip() const;
  void set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ip() const;
  void _internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 kind_id = 4;
  void clear_kind_id();
  ::PROTOBUF_NAMESPACE_ID::int32 kind_id() const;
  void set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kind_id() const;
  void _internal_set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 room_level = 5;
  void clear_room_level();
  ::PROTOBUF_NAMESPACE_ID::int32 room_level() const;
  void set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_room_level() const;
  void _internal_set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 limit_gold = 6;
  void clear_limit_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 limit_gold() const;
  void set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit_gold() const;
  void _internal_set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_player = 7;
  void clear_max_player();
  ::PROTOBUF_NAMESPACE_ID::int32 max_player() const;
  void set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_player() const;
  void _internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgRegisterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 kind_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 room_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgApplyRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgApplyRobot) */ {
 public:
  inline MsgApplyRobot() : MsgApplyRobot(nullptr) {}
  virtual ~MsgApplyRobot();

  MsgApplyRobot(const MsgApplyRobot& from);
  MsgApplyRobot(MsgApplyRobot&& from) noexcept
    : MsgApplyRobot() {
    *this = ::std::move(from);
  }

  inline MsgApplyRobot& operator=(const MsgApplyRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgApplyRobot& operator=(MsgApplyRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgApplyRobot& default_instance();

  static inline const MsgApplyRobot* internal_default_instance() {
    return reinterpret_cast<const MsgApplyRobot*>(
               &_MsgApplyRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgApplyRobot& a, MsgApplyRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgApplyRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgApplyRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgApplyRobot* New() const final {
    return CreateMaybeMessage<MsgApplyRobot>(nullptr);
  }

  MsgApplyRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgApplyRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgApplyRobot& from);
  void MergeFrom(const MsgApplyRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgApplyRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgApplyRobot";
  }
  protected:
  explicit MsgApplyRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kApplyNumFieldNumber = 2,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 apply_num = 2;
  void clear_apply_num();
  ::PROTOBUF_NAMESPACE_ID::int32 apply_num() const;
  void set_apply_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_apply_num() const;
  void _internal_set_apply_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgApplyRobot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 apply_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgApplyRobotResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgApplyRobotResp) */ {
 public:
  inline MsgApplyRobotResp() : MsgApplyRobotResp(nullptr) {}
  virtual ~MsgApplyRobotResp();

  MsgApplyRobotResp(const MsgApplyRobotResp& from);
  MsgApplyRobotResp(MsgApplyRobotResp&& from) noexcept
    : MsgApplyRobotResp() {
    *this = ::std::move(from);
  }

  inline MsgApplyRobotResp& operator=(const MsgApplyRobotResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgApplyRobotResp& operator=(MsgApplyRobotResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgApplyRobotResp& default_instance();

  static inline const MsgApplyRobotResp* internal_default_instance() {
    return reinterpret_cast<const MsgApplyRobotResp*>(
               &_MsgApplyRobotResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgApplyRobotResp& a, MsgApplyRobotResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgApplyRobotResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgApplyRobotResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgApplyRobotResp* New() const final {
    return CreateMaybeMessage<MsgApplyRobotResp>(nullptr);
  }

  MsgApplyRobotResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgApplyRobotResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgApplyRobotResp& from);
  void MergeFrom(const MsgApplyRobotResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgApplyRobotResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgApplyRobotResp";
  }
  protected:
  explicit MsgApplyRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotUserIdFieldNumber = 1,
  };
  // repeated int32 robot_user_id = 1;
  int robot_user_id_size() const;
  private:
  int _internal_robot_user_id_size() const;
  public:
  void clear_robot_user_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robot_user_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_robot_user_id() const;
  void _internal_add_robot_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_robot_user_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 robot_user_id(int index) const;
  void set_robot_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_robot_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      robot_user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_robot_user_id();

  // @@protoc_insertion_point(class_scope:MsgApplyRobotResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > robot_user_id_;
  mutable std::atomic<int> _robot_user_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBUpdateOnlineNum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBUpdateOnlineNum) */ {
 public:
  inline MsgDBUpdateOnlineNum() : MsgDBUpdateOnlineNum(nullptr) {}
  virtual ~MsgDBUpdateOnlineNum();

  MsgDBUpdateOnlineNum(const MsgDBUpdateOnlineNum& from);
  MsgDBUpdateOnlineNum(MsgDBUpdateOnlineNum&& from) noexcept
    : MsgDBUpdateOnlineNum() {
    *this = ::std::move(from);
  }

  inline MsgDBUpdateOnlineNum& operator=(const MsgDBUpdateOnlineNum& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBUpdateOnlineNum& operator=(MsgDBUpdateOnlineNum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBUpdateOnlineNum& default_instance();

  static inline const MsgDBUpdateOnlineNum* internal_default_instance() {
    return reinterpret_cast<const MsgDBUpdateOnlineNum*>(
               &_MsgDBUpdateOnlineNum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgDBUpdateOnlineNum& a, MsgDBUpdateOnlineNum& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBUpdateOnlineNum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBUpdateOnlineNum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBUpdateOnlineNum* New() const final {
    return CreateMaybeMessage<MsgDBUpdateOnlineNum>(nullptr);
  }

  MsgDBUpdateOnlineNum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBUpdateOnlineNum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBUpdateOnlineNum& from);
  void MergeFrom(const MsgDBUpdateOnlineNum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBUpdateOnlineNum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBUpdateOnlineNum";
  }
  protected:
  explicit MsgDBUpdateOnlineNum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPortFieldNumber = 2,
    kOnlineNumFieldNumber = 3,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_num = 3;
  void clear_online_num();
  ::PROTOBUF_NAMESPACE_ID::int32 online_num() const;
  void set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_num() const;
  void _internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBUpdateOnlineNum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBRegisterLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBRegisterLogin) */ {
 public:
  inline MsgDBRegisterLogin() : MsgDBRegisterLogin(nullptr) {}
  virtual ~MsgDBRegisterLogin();

  MsgDBRegisterLogin(const MsgDBRegisterLogin& from);
  MsgDBRegisterLogin(MsgDBRegisterLogin&& from) noexcept
    : MsgDBRegisterLogin() {
    *this = ::std::move(from);
  }

  inline MsgDBRegisterLogin& operator=(const MsgDBRegisterLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBRegisterLogin& operator=(MsgDBRegisterLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBRegisterLogin& default_instance();

  static inline const MsgDBRegisterLogin* internal_default_instance() {
    return reinterpret_cast<const MsgDBRegisterLogin*>(
               &_MsgDBRegisterLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgDBRegisterLogin& a, MsgDBRegisterLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBRegisterLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBRegisterLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBRegisterLogin* New() const final {
    return CreateMaybeMessage<MsgDBRegisterLogin>(nullptr);
  }

  MsgDBRegisterLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBRegisterLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBRegisterLogin& from);
  void MergeFrom(const MsgDBRegisterLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBRegisterLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBRegisterLogin";
  }
  protected:
  explicit MsgDBRegisterLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBRegisterLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgPlayerAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgPlayerAttribute) */ {
 public:
  inline MsgPlayerAttribute() : MsgPlayerAttribute(nullptr) {}
  virtual ~MsgPlayerAttribute();

  MsgPlayerAttribute(const MsgPlayerAttribute& from);
  MsgPlayerAttribute(MsgPlayerAttribute&& from) noexcept
    : MsgPlayerAttribute() {
    *this = ::std::move(from);
  }

  inline MsgPlayerAttribute& operator=(const MsgPlayerAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlayerAttribute& operator=(MsgPlayerAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPlayerAttribute& default_instance();

  static inline const MsgPlayerAttribute* internal_default_instance() {
    return reinterpret_cast<const MsgPlayerAttribute*>(
               &_MsgPlayerAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgPlayerAttribute& a, MsgPlayerAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlayerAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlayerAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPlayerAttribute* New() const final {
    return CreateMaybeMessage<MsgPlayerAttribute>(nullptr);
  }

  MsgPlayerAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPlayerAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPlayerAttribute& from);
  void MergeFrom(const MsgPlayerAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlayerAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgPlayerAttribute";
  }
  protected:
  explicit MsgPlayerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 4,
    kNicknameFieldNumber = 8,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kCoinFieldNumber = 5,
    kUserTypeFieldNumber = 3,
    kHeadIdFieldNumber = 7,
    kBankCoinFieldNumber = 6,
  };
  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string nickname = 8;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 coin = 5;
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 user_type = 3;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 head_id = 7;
  void clear_head_id();
  ::PROTOBUF_NAMESPACE_ID::int32 head_id() const;
  void set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head_id() const;
  void _internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 bank_coin = 6;
  void clear_bank_coin();
  ::PROTOBUF_NAMESPACE_ID::int64 bank_coin() const;
  void set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bank_coin() const;
  void _internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgPlayerAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 coin_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 bank_coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgLoginPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgLoginPlayerInfo) */ {
 public:
  inline MsgLoginPlayerInfo() : MsgLoginPlayerInfo(nullptr) {}
  virtual ~MsgLoginPlayerInfo();

  MsgLoginPlayerInfo(const MsgLoginPlayerInfo& from);
  MsgLoginPlayerInfo(MsgLoginPlayerInfo&& from) noexcept
    : MsgLoginPlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgLoginPlayerInfo& operator=(const MsgLoginPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLoginPlayerInfo& operator=(MsgLoginPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgLoginPlayerInfo& default_instance();

  static inline const MsgLoginPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgLoginPlayerInfo*>(
               &_MsgLoginPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgLoginPlayerInfo& a, MsgLoginPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLoginPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLoginPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgLoginPlayerInfo* New() const final {
    return CreateMaybeMessage<MsgLoginPlayerInfo>(nullptr);
  }

  MsgLoginPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgLoginPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgLoginPlayerInfo& from);
  void MergeFrom(const MsgLoginPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLoginPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgLoginPlayerInfo";
  }
  protected:
  explicit MsgLoginPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAttributeFieldNumber = 1,
  };
  // .MsgPlayerAttribute player_attribute = 1;
  bool has_player_attribute() const;
  private:
  bool _internal_has_player_attribute() const;
  public:
  void clear_player_attribute();
  const ::MsgPlayerAttribute& player_attribute() const;
  ::MsgPlayerAttribute* release_player_attribute();
  ::MsgPlayerAttribute* mutable_player_attribute();
  void set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute);
  private:
  const ::MsgPlayerAttribute& _internal_player_attribute() const;
  ::MsgPlayerAttribute* _internal_mutable_player_attribute();
  public:
  void unsafe_arena_set_allocated_player_attribute(
      ::MsgPlayerAttribute* player_attribute);
  ::MsgPlayerAttribute* unsafe_arena_release_player_attribute();

  // @@protoc_insertion_point(class_scope:MsgLoginPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MsgPlayerAttribute* player_attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgGamePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgGamePlayerInfo) */ {
 public:
  inline MsgGamePlayerInfo() : MsgGamePlayerInfo(nullptr) {}
  virtual ~MsgGamePlayerInfo();

  MsgGamePlayerInfo(const MsgGamePlayerInfo& from);
  MsgGamePlayerInfo(MsgGamePlayerInfo&& from) noexcept
    : MsgGamePlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgGamePlayerInfo& operator=(const MsgGamePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGamePlayerInfo& operator=(MsgGamePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgGamePlayerInfo& default_instance();

  static inline const MsgGamePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgGamePlayerInfo*>(
               &_MsgGamePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgGamePlayerInfo& a, MsgGamePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGamePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGamePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgGamePlayerInfo* New() const final {
    return CreateMaybeMessage<MsgGamePlayerInfo>(nullptr);
  }

  MsgGamePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgGamePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgGamePlayerInfo& from);
  void MergeFrom(const MsgGamePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGamePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgGamePlayerInfo";
  }
  protected:
  explicit MsgGamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAttributeFieldNumber = 1,
  };
  // .MsgPlayerAttribute player_attribute = 1;
  bool has_player_attribute() const;
  private:
  bool _internal_has_player_attribute() const;
  public:
  void clear_player_attribute();
  const ::MsgPlayerAttribute& player_attribute() const;
  ::MsgPlayerAttribute* release_player_attribute();
  ::MsgPlayerAttribute* mutable_player_attribute();
  void set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute);
  private:
  const ::MsgPlayerAttribute& _internal_player_attribute() const;
  ::MsgPlayerAttribute* _internal_mutable_player_attribute();
  public:
  void unsafe_arena_set_allocated_player_attribute(
      ::MsgPlayerAttribute* player_attribute);
  ::MsgPlayerAttribute* unsafe_arena_release_player_attribute();

  // @@protoc_insertion_point(class_scope:MsgGamePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MsgPlayerAttribute* player_attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBLoginOut PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBLoginOut) */ {
 public:
  inline MsgDBLoginOut() : MsgDBLoginOut(nullptr) {}
  virtual ~MsgDBLoginOut();

  MsgDBLoginOut(const MsgDBLoginOut& from);
  MsgDBLoginOut(MsgDBLoginOut&& from) noexcept
    : MsgDBLoginOut() {
    *this = ::std::move(from);
  }

  inline MsgDBLoginOut& operator=(const MsgDBLoginOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBLoginOut& operator=(MsgDBLoginOut&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBLoginOut& default_instance();

  static inline const MsgDBLoginOut* internal_default_instance() {
    return reinterpret_cast<const MsgDBLoginOut*>(
               &_MsgDBLoginOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgDBLoginOut& a, MsgDBLoginOut& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBLoginOut* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBLoginOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBLoginOut* New() const final {
    return CreateMaybeMessage<MsgDBLoginOut>(nullptr);
  }

  MsgDBLoginOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBLoginOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBLoginOut& from);
  void MergeFrom(const MsgDBLoginOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBLoginOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBLoginOut";
  }
  protected:
  explicit MsgDBLoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOnlineTimeFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 online_time = 2;
  void clear_online_time();
  ::PROTOBUF_NAMESPACE_ID::int32 online_time() const;
  void set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online_time() const;
  void _internal_set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBLoginOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBUpdatePlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBUpdatePlayerInfo) */ {
 public:
  inline MsgDBUpdatePlayerInfo() : MsgDBUpdatePlayerInfo(nullptr) {}
  virtual ~MsgDBUpdatePlayerInfo();

  MsgDBUpdatePlayerInfo(const MsgDBUpdatePlayerInfo& from);
  MsgDBUpdatePlayerInfo(MsgDBUpdatePlayerInfo&& from) noexcept
    : MsgDBUpdatePlayerInfo() {
    *this = ::std::move(from);
  }

  inline MsgDBUpdatePlayerInfo& operator=(const MsgDBUpdatePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBUpdatePlayerInfo& operator=(MsgDBUpdatePlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBUpdatePlayerInfo& default_instance();

  static inline const MsgDBUpdatePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MsgDBUpdatePlayerInfo*>(
               &_MsgDBUpdatePlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgDBUpdatePlayerInfo& a, MsgDBUpdatePlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBUpdatePlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBUpdatePlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBUpdatePlayerInfo* New() const final {
    return CreateMaybeMessage<MsgDBUpdatePlayerInfo>(nullptr);
  }

  MsgDBUpdatePlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBUpdatePlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBUpdatePlayerInfo& from);
  void MergeFrom(const MsgDBUpdatePlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBUpdatePlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBUpdatePlayerInfo";
  }
  protected:
  explicit MsgDBUpdatePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 4,
    kNicknameFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kBeautifulIdFieldNumber = 2,
    kUserTypeFieldNumber = 3,
    kHeadIdFieldNumber = 5,
  };
  // string phone = 4;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string nickname = 6;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beautiful_id = 2;
  void clear_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id() const;
  void set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beautiful_id() const;
  void _internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_type = 3;
  void clear_user_type();
  ::PROTOBUF_NAMESPACE_ID::int32 user_type() const;
  void set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_type() const;
  void _internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 head_id = 5;
  void clear_head_id();
  ::PROTOBUF_NAMESPACE_ID::int32 head_id() const;
  void set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_head_id() const;
  void _internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBUpdatePlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 head_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBMailData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBMailData) */ {
 public:
  inline MsgDBMailData() : MsgDBMailData(nullptr) {}
  virtual ~MsgDBMailData();

  MsgDBMailData(const MsgDBMailData& from);
  MsgDBMailData(MsgDBMailData&& from) noexcept
    : MsgDBMailData() {
    *this = ::std::move(from);
  }

  inline MsgDBMailData& operator=(const MsgDBMailData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBMailData& operator=(MsgDBMailData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBMailData& default_instance();

  static inline const MsgDBMailData* internal_default_instance() {
    return reinterpret_cast<const MsgDBMailData*>(
               &_MsgDBMailData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgDBMailData& a, MsgDBMailData& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBMailData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBMailData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBMailData* New() const final {
    return CreateMaybeMessage<MsgDBMailData>(nullptr);
  }

  MsgDBMailData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBMailData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBMailData& from);
  void MergeFrom(const MsgDBMailData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBMailData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBMailData";
  }
  protected:
  explicit MsgDBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMailIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mail_id = 2;
  void clear_mail_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mail_id() const;
  void set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mail_id() const;
  void _internal_set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBMailData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 mail_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBModifyBankGold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBModifyBankGold) */ {
 public:
  inline MsgDBModifyBankGold() : MsgDBModifyBankGold(nullptr) {}
  virtual ~MsgDBModifyBankGold();

  MsgDBModifyBankGold(const MsgDBModifyBankGold& from);
  MsgDBModifyBankGold(MsgDBModifyBankGold&& from) noexcept
    : MsgDBModifyBankGold() {
    *this = ::std::move(from);
  }

  inline MsgDBModifyBankGold& operator=(const MsgDBModifyBankGold& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBModifyBankGold& operator=(MsgDBModifyBankGold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBModifyBankGold& default_instance();

  static inline const MsgDBModifyBankGold* internal_default_instance() {
    return reinterpret_cast<const MsgDBModifyBankGold*>(
               &_MsgDBModifyBankGold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgDBModifyBankGold& a, MsgDBModifyBankGold& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBModifyBankGold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBModifyBankGold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBModifyBankGold* New() const final {
    return CreateMaybeMessage<MsgDBModifyBankGold>(nullptr);
  }

  MsgDBModifyBankGold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBModifyBankGold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBModifyBankGold& from);
  void MergeFrom(const MsgDBModifyBankGold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBModifyBankGold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBModifyBankGold";
  }
  protected:
  explicit MsgDBModifyBankGold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldFieldNumber = 2,
    kTypeFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // int64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user_id = 3;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBModifyBankGold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBSendUserGold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBSendUserGold) */ {
 public:
  inline MsgDBSendUserGold() : MsgDBSendUserGold(nullptr) {}
  virtual ~MsgDBSendUserGold();

  MsgDBSendUserGold(const MsgDBSendUserGold& from);
  MsgDBSendUserGold(MsgDBSendUserGold&& from) noexcept
    : MsgDBSendUserGold() {
    *this = ::std::move(from);
  }

  inline MsgDBSendUserGold& operator=(const MsgDBSendUserGold& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBSendUserGold& operator=(MsgDBSendUserGold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBSendUserGold& default_instance();

  static inline const MsgDBSendUserGold* internal_default_instance() {
    return reinterpret_cast<const MsgDBSendUserGold*>(
               &_MsgDBSendUserGold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgDBSendUserGold& a, MsgDBSendUserGold& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBSendUserGold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBSendUserGold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBSendUserGold* New() const final {
    return CreateMaybeMessage<MsgDBSendUserGold>(nullptr);
  }

  MsgDBSendUserGold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBSendUserGold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBSendUserGold& from);
  void MergeFrom(const MsgDBSendUserGold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBSendUserGold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBSendUserGold";
  }
  protected:
  explicit MsgDBSendUserGold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendUserIdFieldNumber = 1,
    kRecverBeautifulIdFieldNumber = 2,
    kGoldFieldNumber = 3,
  };
  // int32 send_user_id = 1;
  void clear_send_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 send_user_id() const;
  void set_send_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_user_id() const;
  void _internal_set_send_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 recver_beautiful_id = 2;
  void clear_recver_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 recver_beautiful_id() const;
  void set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recver_beautiful_id() const;
  void _internal_set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 3;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBSendUserGold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 recver_beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBMail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBMail) */ {
 public:
  inline MsgDBMail() : MsgDBMail(nullptr) {}
  virtual ~MsgDBMail();

  MsgDBMail(const MsgDBMail& from);
  MsgDBMail(MsgDBMail&& from) noexcept
    : MsgDBMail() {
    *this = ::std::move(from);
  }

  inline MsgDBMail& operator=(const MsgDBMail& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBMail& operator=(MsgDBMail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBMail& default_instance();

  static inline const MsgDBMail* internal_default_instance() {
    return reinterpret_cast<const MsgDBMail*>(
               &_MsgDBMail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgDBMail& a, MsgDBMail& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBMail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBMail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBMail* New() const final {
    return CreateMaybeMessage<MsgDBMail>(nullptr);
  }

  MsgDBMail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBMail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBMail& from);
  void MergeFrom(const MsgDBMail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBMail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBMail";
  }
  protected:
  explicit MsgDBMail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailTitleFieldNumber = 5,
    kMailContentFieldNumber = 6,
    kMailGuidFieldNumber = 1,
    kMailIdFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kRecverBeautifulIdFieldNumber = 4,
    kGoldFieldNumber = 7,
    kSendTimeFieldNumber = 8,
    kIsCustomFieldNumber = 9,
  };
  // string mail_title = 5;
  void clear_mail_title();
  const std::string& mail_title() const;
  void set_mail_title(const std::string& value);
  void set_mail_title(std::string&& value);
  void set_mail_title(const char* value);
  void set_mail_title(const char* value, size_t size);
  std::string* mutable_mail_title();
  std::string* release_mail_title();
  void set_allocated_mail_title(std::string* mail_title);
  private:
  const std::string& _internal_mail_title() const;
  void _internal_set_mail_title(const std::string& value);
  std::string* _internal_mutable_mail_title();
  public:

  // string mail_content = 6;
  void clear_mail_content();
  const std::string& mail_content() const;
  void set_mail_content(const std::string& value);
  void set_mail_content(std::string&& value);
  void set_mail_content(const char* value);
  void set_mail_content(const char* value, size_t size);
  std::string* mutable_mail_content();
  std::string* release_mail_content();
  void set_allocated_mail_content(std::string* mail_content);
  private:
  const std::string& _internal_mail_content() const;
  void _internal_set_mail_content(const std::string& value);
  std::string* _internal_mutable_mail_content();
  public:

  // int32 mail_guid = 1;
  void clear_mail_guid();
  ::PROTOBUF_NAMESPACE_ID::int32 mail_guid() const;
  void set_mail_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mail_guid() const;
  void _internal_set_mail_guid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mail_id = 2;
  void clear_mail_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mail_id() const;
  void set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mail_id() const;
  void _internal_set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sender_id = 3;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 recver_beautiful_id = 4;
  void clear_recver_beautiful_id();
  ::PROTOBUF_NAMESPACE_ID::int32 recver_beautiful_id() const;
  void set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recver_beautiful_id() const;
  void _internal_set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 gold = 7;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 send_time = 8;
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::int64 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 is_custom = 9;
  void clear_is_custom();
  ::PROTOBUF_NAMESPACE_ID::int32 is_custom() const;
  void set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_custom() const;
  void _internal_set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBMail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_content_;
  ::PROTOBUF_NAMESPACE_ID::int32 mail_guid_;
  ::PROTOBUF_NAMESPACE_ID::int32 mail_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 recver_beautiful_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 send_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_custom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBRegisterGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBRegisterGame) */ {
 public:
  inline MsgDBRegisterGame() : MsgDBRegisterGame(nullptr) {}
  virtual ~MsgDBRegisterGame();

  MsgDBRegisterGame(const MsgDBRegisterGame& from);
  MsgDBRegisterGame(MsgDBRegisterGame&& from) noexcept
    : MsgDBRegisterGame() {
    *this = ::std::move(from);
  }

  inline MsgDBRegisterGame& operator=(const MsgDBRegisterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBRegisterGame& operator=(MsgDBRegisterGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBRegisterGame& default_instance();

  static inline const MsgDBRegisterGame* internal_default_instance() {
    return reinterpret_cast<const MsgDBRegisterGame*>(
               &_MsgDBRegisterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MsgDBRegisterGame& a, MsgDBRegisterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBRegisterGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBRegisterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBRegisterGame* New() const final {
    return CreateMaybeMessage<MsgDBRegisterGame>(nullptr);
  }

  MsgDBRegisterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBRegisterGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBRegisterGame& from);
  void MergeFrom(const MsgDBRegisterGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBRegisterGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBRegisterGame";
  }
  protected:
  explicit MsgDBRegisterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // string server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgDBRegisterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgDBLoadRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgDBLoadRobot) */ {
 public:
  inline MsgDBLoadRobot() : MsgDBLoadRobot(nullptr) {}
  virtual ~MsgDBLoadRobot();

  MsgDBLoadRobot(const MsgDBLoadRobot& from);
  MsgDBLoadRobot(MsgDBLoadRobot&& from) noexcept
    : MsgDBLoadRobot() {
    *this = ::std::move(from);
  }

  inline MsgDBLoadRobot& operator=(const MsgDBLoadRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDBLoadRobot& operator=(MsgDBLoadRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgDBLoadRobot& default_instance();

  static inline const MsgDBLoadRobot* internal_default_instance() {
    return reinterpret_cast<const MsgDBLoadRobot*>(
               &_MsgDBLoadRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgDBLoadRobot& a, MsgDBLoadRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDBLoadRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDBLoadRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgDBLoadRobot* New() const final {
    return CreateMaybeMessage<MsgDBLoadRobot>(nullptr);
  }

  MsgDBLoadRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgDBLoadRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgDBLoadRobot& from);
  void MergeFrom(const MsgDBLoadRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDBLoadRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgDBLoadRobot";
  }
  protected:
  explicit MsgDBLoadRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // repeated int32 user_id = 1;
  int user_id_size() const;
  private:
  int _internal_user_id_size() const;
  public:
  void clear_user_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_user_id() const;
  void _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_user_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 user_id(int index) const;
  void set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_user_id();

  // @@protoc_insertion_point(class_scope:MsgDBLoadRobot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > user_id_;
  mutable std::atomic<int> _user_id_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateRobot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCreateRobot) */ {
 public:
  inline MsgCreateRobot() : MsgCreateRobot(nullptr) {}
  virtual ~MsgCreateRobot();

  MsgCreateRobot(const MsgCreateRobot& from);
  MsgCreateRobot(MsgCreateRobot&& from) noexcept
    : MsgCreateRobot() {
    *this = ::std::move(from);
  }

  inline MsgCreateRobot& operator=(const MsgCreateRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateRobot& operator=(MsgCreateRobot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCreateRobot& default_instance();

  static inline const MsgCreateRobot* internal_default_instance() {
    return reinterpret_cast<const MsgCreateRobot*>(
               &_MsgCreateRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MsgCreateRobot& a, MsgCreateRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateRobot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCreateRobot* New() const final {
    return CreateMaybeMessage<MsgCreateRobot>(nullptr);
  }

  MsgCreateRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCreateRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCreateRobot& from);
  void MergeFrom(const MsgCreateRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCreateRobot";
  }
  protected:
  explicit MsgCreateRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
    kGenerateNumFieldNumber = 2,
    kClientSocketIdFieldNumber = 3,
  };
  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 generate_num = 2;
  void clear_generate_num();
  ::PROTOBUF_NAMESPACE_ID::int32 generate_num() const;
  void set_generate_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_generate_num() const;
  void _internal_set_generate_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_socket_id = 3;
  void clear_client_socket_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_socket_id() const;
  void set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_socket_id() const;
  void _internal_set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgCreateRobot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 generate_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_socket_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// -------------------------------------------------------------------

class MsgCreateRobotResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgCreateRobotResp) */ {
 public:
  inline MsgCreateRobotResp() : MsgCreateRobotResp(nullptr) {}
  virtual ~MsgCreateRobotResp();

  MsgCreateRobotResp(const MsgCreateRobotResp& from);
  MsgCreateRobotResp(MsgCreateRobotResp&& from) noexcept
    : MsgCreateRobotResp() {
    *this = ::std::move(from);
  }

  inline MsgCreateRobotResp& operator=(const MsgCreateRobotResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateRobotResp& operator=(MsgCreateRobotResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgCreateRobotResp& default_instance();

  static inline const MsgCreateRobotResp* internal_default_instance() {
    return reinterpret_cast<const MsgCreateRobotResp*>(
               &_MsgCreateRobotResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MsgCreateRobotResp& a, MsgCreateRobotResp& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateRobotResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateRobotResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgCreateRobotResp* New() const final {
    return CreateMaybeMessage<MsgCreateRobotResp>(nullptr);
  }

  MsgCreateRobotResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgCreateRobotResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgCreateRobotResp& from);
  void MergeFrom(const MsgCreateRobotResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateRobotResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MsgCreateRobotResp";
  }
  protected:
  explicit MsgCreateRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServerInternalProto_2eproto);
    return ::descriptor_table_ServerInternalProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kClientSocketIdFieldNumber = 3,
  };
  // repeated int32 user_id = 2;
  int user_id_size() const;
  private:
  int _internal_user_id_size() const;
  public:
  void clear_user_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_user_id() const;
  void _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_user_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 user_id(int index) const;
  void set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      user_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_user_id();

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_socket_id = 3;
  void clear_client_socket_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_socket_id() const;
  void set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_socket_id() const;
  void _internal_set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MsgCreateRobotResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > user_id_;
  mutable std::atomic<int> _user_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_socket_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerInternalProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgRegisterLoginServer

// int32 ip = 1;
inline void MsgRegisterLoginServer::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::ip() const {
  // @@protoc_insertion_point(field_get:MsgRegisterLoginServer.ip)
  return _internal_ip();
}
inline void MsgRegisterLoginServer::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void MsgRegisterLoginServer::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:MsgRegisterLoginServer.ip)
}

// int32 port = 2;
inline void MsgRegisterLoginServer::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::port() const {
  // @@protoc_insertion_point(field_get:MsgRegisterLoginServer.port)
  return _internal_port();
}
inline void MsgRegisterLoginServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgRegisterLoginServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgRegisterLoginServer.port)
}

// int32 server_id = 3;
inline void MsgRegisterLoginServer::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterLoginServer::server_id() const {
  // @@protoc_insertion_point(field_get:MsgRegisterLoginServer.server_id)
  return _internal_server_id();
}
inline void MsgRegisterLoginServer::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgRegisterLoginServer::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgRegisterLoginServer.server_id)
}

// -------------------------------------------------------------------

// MsgRegisterGameServer

// int32 ip = 1;
inline void MsgRegisterGameServer::clear_ip() {
  ip_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_ip() const {
  return ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::ip() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.ip)
  return _internal_ip();
}
inline void MsgRegisterGameServer::_internal_set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ip_ = value;
}
inline void MsgRegisterGameServer::set_ip(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.ip)
}

// int32 port = 2;
inline void MsgRegisterGameServer::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::port() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.port)
  return _internal_port();
}
inline void MsgRegisterGameServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgRegisterGameServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.port)
}

// int32 server_id = 3;
inline void MsgRegisterGameServer::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::server_id() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.server_id)
  return _internal_server_id();
}
inline void MsgRegisterGameServer::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgRegisterGameServer::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.server_id)
}

// int32 kind_id = 4;
inline void MsgRegisterGameServer::clear_kind_id() {
  kind_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_kind_id() const {
  return kind_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::kind_id() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.kind_id)
  return _internal_kind_id();
}
inline void MsgRegisterGameServer::_internal_set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kind_id_ = value;
}
inline void MsgRegisterGameServer::set_kind_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kind_id(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.kind_id)
}

// int32 room_level = 5;
inline void MsgRegisterGameServer::clear_room_level() {
  room_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_room_level() const {
  return room_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::room_level() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.room_level)
  return _internal_room_level();
}
inline void MsgRegisterGameServer::_internal_set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  room_level_ = value;
}
inline void MsgRegisterGameServer::set_room_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_room_level(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.room_level)
}

// int32 limit_gold = 6;
inline void MsgRegisterGameServer::clear_limit_gold() {
  limit_gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_limit_gold() const {
  return limit_gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::limit_gold() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.limit_gold)
  return _internal_limit_gold();
}
inline void MsgRegisterGameServer::_internal_set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_gold_ = value;
}
inline void MsgRegisterGameServer::set_limit_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit_gold(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.limit_gold)
}

// int32 max_player = 7;
inline void MsgRegisterGameServer::clear_max_player() {
  max_player_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::_internal_max_player() const {
  return max_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgRegisterGameServer::max_player() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.max_player)
  return _internal_max_player();
}
inline void MsgRegisterGameServer::_internal_set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_player_ = value;
}
inline void MsgRegisterGameServer::set_max_player(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_player(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.max_player)
}

// string room_name = 8;
inline void MsgRegisterGameServer::clear_room_name() {
  room_name_.ClearToEmpty();
}
inline const std::string& MsgRegisterGameServer::room_name() const {
  // @@protoc_insertion_point(field_get:MsgRegisterGameServer.room_name)
  return _internal_room_name();
}
inline void MsgRegisterGameServer::set_room_name(const std::string& value) {
  _internal_set_room_name(value);
  // @@protoc_insertion_point(field_set:MsgRegisterGameServer.room_name)
}
inline std::string* MsgRegisterGameServer::mutable_room_name() {
  // @@protoc_insertion_point(field_mutable:MsgRegisterGameServer.room_name)
  return _internal_mutable_room_name();
}
inline const std::string& MsgRegisterGameServer::_internal_room_name() const {
  return room_name_.Get();
}
inline void MsgRegisterGameServer::_internal_set_room_name(const std::string& value) {
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgRegisterGameServer::set_room_name(std::string&& value) {
  
  room_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgRegisterGameServer.room_name)
}
inline void MsgRegisterGameServer::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgRegisterGameServer.room_name)
}
inline void MsgRegisterGameServer::set_room_name(const char* value,
    size_t size) {
  
  room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgRegisterGameServer.room_name)
}
inline std::string* MsgRegisterGameServer::_internal_mutable_room_name() {
  
  return room_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgRegisterGameServer::release_room_name() {
  // @@protoc_insertion_point(field_release:MsgRegisterGameServer.room_name)
  return room_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgRegisterGameServer::set_allocated_room_name(std::string* room_name) {
  if (room_name != nullptr) {
    
  } else {
    
  }
  room_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), room_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgRegisterGameServer.room_name)
}

// -------------------------------------------------------------------

// MsgApplyRobot

// int32 server_id = 1;
inline void MsgApplyRobot::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobot::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobot::server_id() const {
  // @@protoc_insertion_point(field_get:MsgApplyRobot.server_id)
  return _internal_server_id();
}
inline void MsgApplyRobot::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgApplyRobot::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgApplyRobot.server_id)
}

// int32 apply_num = 2;
inline void MsgApplyRobot::clear_apply_num() {
  apply_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobot::_internal_apply_num() const {
  return apply_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobot::apply_num() const {
  // @@protoc_insertion_point(field_get:MsgApplyRobot.apply_num)
  return _internal_apply_num();
}
inline void MsgApplyRobot::_internal_set_apply_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  apply_num_ = value;
}
inline void MsgApplyRobot::set_apply_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_apply_num(value);
  // @@protoc_insertion_point(field_set:MsgApplyRobot.apply_num)
}

// -------------------------------------------------------------------

// MsgApplyRobotResp

// repeated int32 robot_user_id = 1;
inline int MsgApplyRobotResp::_internal_robot_user_id_size() const {
  return robot_user_id_.size();
}
inline int MsgApplyRobotResp::robot_user_id_size() const {
  return _internal_robot_user_id_size();
}
inline void MsgApplyRobotResp::clear_robot_user_id() {
  robot_user_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobotResp::_internal_robot_user_id(int index) const {
  return robot_user_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgApplyRobotResp::robot_user_id(int index) const {
  // @@protoc_insertion_point(field_get:MsgApplyRobotResp.robot_user_id)
  return _internal_robot_user_id(index);
}
inline void MsgApplyRobotResp::set_robot_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  robot_user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgApplyRobotResp.robot_user_id)
}
inline void MsgApplyRobotResp::_internal_add_robot_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  robot_user_id_.Add(value);
}
inline void MsgApplyRobotResp::add_robot_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_robot_user_id(value);
  // @@protoc_insertion_point(field_add:MsgApplyRobotResp.robot_user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgApplyRobotResp::_internal_robot_user_id() const {
  return robot_user_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgApplyRobotResp::robot_user_id() const {
  // @@protoc_insertion_point(field_list:MsgApplyRobotResp.robot_user_id)
  return _internal_robot_user_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgApplyRobotResp::_internal_mutable_robot_user_id() {
  return &robot_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgApplyRobotResp::mutable_robot_user_id() {
  // @@protoc_insertion_point(field_mutable_list:MsgApplyRobotResp.robot_user_id)
  return _internal_mutable_robot_user_id();
}

// -------------------------------------------------------------------

// MsgDBUpdateOnlineNum

// int32 server_id = 1;
inline void MsgDBUpdateOnlineNum::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::server_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.server_id)
  return _internal_server_id();
}
inline void MsgDBUpdateOnlineNum::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgDBUpdateOnlineNum::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.server_id)
}

// int32 port = 2;
inline void MsgDBUpdateOnlineNum::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::port() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.port)
  return _internal_port();
}
inline void MsgDBUpdateOnlineNum::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgDBUpdateOnlineNum::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.port)
}

// int32 online_num = 3;
inline void MsgDBUpdateOnlineNum::clear_online_num() {
  online_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::_internal_online_num() const {
  return online_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdateOnlineNum::online_num() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdateOnlineNum.online_num)
  return _internal_online_num();
}
inline void MsgDBUpdateOnlineNum::_internal_set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_num_ = value;
}
inline void MsgDBUpdateOnlineNum::set_online_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_num(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdateOnlineNum.online_num)
}

// -------------------------------------------------------------------

// MsgDBRegisterLogin

// int32 server_id = 1;
inline void MsgDBRegisterLogin::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::server_id() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterLogin.server_id)
  return _internal_server_id();
}
inline void MsgDBRegisterLogin::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgDBRegisterLogin::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterLogin.server_id)
}

// int32 port = 2;
inline void MsgDBRegisterLogin::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterLogin::port() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterLogin.port)
  return _internal_port();
}
inline void MsgDBRegisterLogin::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void MsgDBRegisterLogin::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterLogin.port)
}

// -------------------------------------------------------------------

// MsgPlayerAttribute

// int32 user_id = 1;
inline void MsgPlayerAttribute::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::user_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.user_id)
  return _internal_user_id();
}
inline void MsgPlayerAttribute::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgPlayerAttribute::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.user_id)
}

// int32 beautiful_id = 2;
inline void MsgPlayerAttribute::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgPlayerAttribute::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgPlayerAttribute::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.beautiful_id)
}

// int32 user_type = 3;
inline void MsgPlayerAttribute::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::user_type() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.user_type)
  return _internal_user_type();
}
inline void MsgPlayerAttribute::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgPlayerAttribute::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.user_type)
}

// string phone = 4;
inline void MsgPlayerAttribute::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& MsgPlayerAttribute::phone() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.phone)
  return _internal_phone();
}
inline void MsgPlayerAttribute::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.phone)
}
inline std::string* MsgPlayerAttribute::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerAttribute.phone)
  return _internal_mutable_phone();
}
inline const std::string& MsgPlayerAttribute::_internal_phone() const {
  return phone_.Get();
}
inline void MsgPlayerAttribute::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerAttribute::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerAttribute.phone)
}
inline void MsgPlayerAttribute::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerAttribute.phone)
}
inline void MsgPlayerAttribute::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerAttribute.phone)
}
inline std::string* MsgPlayerAttribute::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerAttribute::release_phone() {
  // @@protoc_insertion_point(field_release:MsgPlayerAttribute.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerAttribute::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerAttribute.phone)
}

// int64 coin = 5;
inline void MsgPlayerAttribute::clear_coin() {
  coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.coin)
  return _internal_coin();
}
inline void MsgPlayerAttribute::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  coin_ = value;
}
inline void MsgPlayerAttribute::set_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.coin)
}

// int64 bank_coin = 6;
inline void MsgPlayerAttribute::clear_bank_coin() {
  bank_coin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::_internal_bank_coin() const {
  return bank_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgPlayerAttribute::bank_coin() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.bank_coin)
  return _internal_bank_coin();
}
inline void MsgPlayerAttribute::_internal_set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bank_coin_ = value;
}
inline void MsgPlayerAttribute::set_bank_coin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bank_coin(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.bank_coin)
}

// int32 head_id = 7;
inline void MsgPlayerAttribute::clear_head_id() {
  head_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::_internal_head_id() const {
  return head_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgPlayerAttribute::head_id() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.head_id)
  return _internal_head_id();
}
inline void MsgPlayerAttribute::_internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  head_id_ = value;
}
inline void MsgPlayerAttribute::set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.head_id)
}

// string nickname = 8;
inline void MsgPlayerAttribute::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgPlayerAttribute::nickname() const {
  // @@protoc_insertion_point(field_get:MsgPlayerAttribute.nickname)
  return _internal_nickname();
}
inline void MsgPlayerAttribute::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgPlayerAttribute.nickname)
}
inline std::string* MsgPlayerAttribute::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgPlayerAttribute.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgPlayerAttribute::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgPlayerAttribute::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgPlayerAttribute::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgPlayerAttribute.nickname)
}
inline void MsgPlayerAttribute::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgPlayerAttribute.nickname)
}
inline void MsgPlayerAttribute::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgPlayerAttribute.nickname)
}
inline std::string* MsgPlayerAttribute::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgPlayerAttribute::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgPlayerAttribute.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgPlayerAttribute::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgPlayerAttribute.nickname)
}

// -------------------------------------------------------------------

// MsgLoginPlayerInfo

// .MsgPlayerAttribute player_attribute = 1;
inline bool MsgLoginPlayerInfo::_internal_has_player_attribute() const {
  return this != internal_default_instance() && player_attribute_ != nullptr;
}
inline bool MsgLoginPlayerInfo::has_player_attribute() const {
  return _internal_has_player_attribute();
}
inline void MsgLoginPlayerInfo::clear_player_attribute() {
  if (GetArena() == nullptr && player_attribute_ != nullptr) {
    delete player_attribute_;
  }
  player_attribute_ = nullptr;
}
inline const ::MsgPlayerAttribute& MsgLoginPlayerInfo::_internal_player_attribute() const {
  const ::MsgPlayerAttribute* p = player_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgPlayerAttribute&>(
      ::_MsgPlayerAttribute_default_instance_);
}
inline const ::MsgPlayerAttribute& MsgLoginPlayerInfo::player_attribute() const {
  // @@protoc_insertion_point(field_get:MsgLoginPlayerInfo.player_attribute)
  return _internal_player_attribute();
}
inline void MsgLoginPlayerInfo::unsafe_arena_set_allocated_player_attribute(
    ::MsgPlayerAttribute* player_attribute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_attribute_);
  }
  player_attribute_ = player_attribute;
  if (player_attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MsgLoginPlayerInfo.player_attribute)
}
inline ::MsgPlayerAttribute* MsgLoginPlayerInfo::release_player_attribute() {
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MsgPlayerAttribute* MsgLoginPlayerInfo::unsafe_arena_release_player_attribute() {
  // @@protoc_insertion_point(field_release:MsgLoginPlayerInfo.player_attribute)
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  return temp;
}
inline ::MsgPlayerAttribute* MsgLoginPlayerInfo::_internal_mutable_player_attribute() {
  
  if (player_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgPlayerAttribute>(GetArena());
    player_attribute_ = p;
  }
  return player_attribute_;
}
inline ::MsgPlayerAttribute* MsgLoginPlayerInfo::mutable_player_attribute() {
  // @@protoc_insertion_point(field_mutable:MsgLoginPlayerInfo.player_attribute)
  return _internal_mutable_player_attribute();
}
inline void MsgLoginPlayerInfo::set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_attribute_;
  }
  if (player_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_attribute);
    if (message_arena != submessage_arena) {
      player_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_attribute, submessage_arena);
    }
    
  } else {
    
  }
  player_attribute_ = player_attribute;
  // @@protoc_insertion_point(field_set_allocated:MsgLoginPlayerInfo.player_attribute)
}

// -------------------------------------------------------------------

// MsgGamePlayerInfo

// .MsgPlayerAttribute player_attribute = 1;
inline bool MsgGamePlayerInfo::_internal_has_player_attribute() const {
  return this != internal_default_instance() && player_attribute_ != nullptr;
}
inline bool MsgGamePlayerInfo::has_player_attribute() const {
  return _internal_has_player_attribute();
}
inline void MsgGamePlayerInfo::clear_player_attribute() {
  if (GetArena() == nullptr && player_attribute_ != nullptr) {
    delete player_attribute_;
  }
  player_attribute_ = nullptr;
}
inline const ::MsgPlayerAttribute& MsgGamePlayerInfo::_internal_player_attribute() const {
  const ::MsgPlayerAttribute* p = player_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::MsgPlayerAttribute&>(
      ::_MsgPlayerAttribute_default_instance_);
}
inline const ::MsgPlayerAttribute& MsgGamePlayerInfo::player_attribute() const {
  // @@protoc_insertion_point(field_get:MsgGamePlayerInfo.player_attribute)
  return _internal_player_attribute();
}
inline void MsgGamePlayerInfo::unsafe_arena_set_allocated_player_attribute(
    ::MsgPlayerAttribute* player_attribute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_attribute_);
  }
  player_attribute_ = player_attribute;
  if (player_attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MsgGamePlayerInfo.player_attribute)
}
inline ::MsgPlayerAttribute* MsgGamePlayerInfo::release_player_attribute() {
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MsgPlayerAttribute* MsgGamePlayerInfo::unsafe_arena_release_player_attribute() {
  // @@protoc_insertion_point(field_release:MsgGamePlayerInfo.player_attribute)
  
  ::MsgPlayerAttribute* temp = player_attribute_;
  player_attribute_ = nullptr;
  return temp;
}
inline ::MsgPlayerAttribute* MsgGamePlayerInfo::_internal_mutable_player_attribute() {
  
  if (player_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::MsgPlayerAttribute>(GetArena());
    player_attribute_ = p;
  }
  return player_attribute_;
}
inline ::MsgPlayerAttribute* MsgGamePlayerInfo::mutable_player_attribute() {
  // @@protoc_insertion_point(field_mutable:MsgGamePlayerInfo.player_attribute)
  return _internal_mutable_player_attribute();
}
inline void MsgGamePlayerInfo::set_allocated_player_attribute(::MsgPlayerAttribute* player_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_attribute_;
  }
  if (player_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_attribute);
    if (message_arena != submessage_arena) {
      player_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_attribute, submessage_arena);
    }
    
  } else {
    
  }
  player_attribute_ = player_attribute;
  // @@protoc_insertion_point(field_set_allocated:MsgGamePlayerInfo.player_attribute)
}

// -------------------------------------------------------------------

// MsgDBLoginOut

// int32 user_id = 1;
inline void MsgDBLoginOut::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBLoginOut.user_id)
  return _internal_user_id();
}
inline void MsgDBLoginOut::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBLoginOut::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBLoginOut.user_id)
}

// int32 online_time = 2;
inline void MsgDBLoginOut::clear_online_time() {
  online_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::_internal_online_time() const {
  return online_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoginOut::online_time() const {
  // @@protoc_insertion_point(field_get:MsgDBLoginOut.online_time)
  return _internal_online_time();
}
inline void MsgDBLoginOut::_internal_set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_time_ = value;
}
inline void MsgDBLoginOut::set_online_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online_time(value);
  // @@protoc_insertion_point(field_set:MsgDBLoginOut.online_time)
}

// -------------------------------------------------------------------

// MsgDBUpdatePlayerInfo

// int32 user_id = 1;
inline void MsgDBUpdatePlayerInfo::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.user_id)
  return _internal_user_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.user_id)
}

// int32 beautiful_id = 2;
inline void MsgDBUpdatePlayerInfo::clear_beautiful_id() {
  beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_beautiful_id() const {
  return beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.beautiful_id)
  return _internal_beautiful_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beautiful_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.beautiful_id)
}

// int32 user_type = 3;
inline void MsgDBUpdatePlayerInfo::clear_user_type() {
  user_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_user_type() const {
  return user_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::user_type() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.user_type)
  return _internal_user_type();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_type_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_user_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.user_type)
}

// string phone = 4;
inline void MsgDBUpdatePlayerInfo::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::phone() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.phone)
  return _internal_phone();
}
inline void MsgDBUpdatePlayerInfo::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.phone)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.phone)
  return _internal_mutable_phone();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_phone() const {
  return phone_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.phone)
}
inline void MsgDBUpdatePlayerInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.phone)
}
inline void MsgDBUpdatePlayerInfo::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.phone)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_phone() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.phone)
}

// int32 head_id = 5;
inline void MsgDBUpdatePlayerInfo::clear_head_id() {
  head_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::_internal_head_id() const {
  return head_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBUpdatePlayerInfo::head_id() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.head_id)
  return _internal_head_id();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  head_id_ = value;
}
inline void MsgDBUpdatePlayerInfo::set_head_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_head_id(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.head_id)
}

// string nickname = 6;
inline void MsgDBUpdatePlayerInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.nickname)
  return _internal_nickname();
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.nickname)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_nickname(std::string&& value) {
  
  nickname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.nickname)
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.nickname)
}
inline void MsgDBUpdatePlayerInfo::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.nickname)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.nickname)
}

// string password = 7;
inline void MsgDBUpdatePlayerInfo::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& MsgDBUpdatePlayerInfo::password() const {
  // @@protoc_insertion_point(field_get:MsgDBUpdatePlayerInfo.password)
  return _internal_password();
}
inline void MsgDBUpdatePlayerInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MsgDBUpdatePlayerInfo.password)
}
inline std::string* MsgDBUpdatePlayerInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MsgDBUpdatePlayerInfo.password)
  return _internal_mutable_password();
}
inline const std::string& MsgDBUpdatePlayerInfo::_internal_password() const {
  return password_.Get();
}
inline void MsgDBUpdatePlayerInfo::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBUpdatePlayerInfo.password)
}
inline void MsgDBUpdatePlayerInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBUpdatePlayerInfo.password)
}
inline void MsgDBUpdatePlayerInfo::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBUpdatePlayerInfo.password)
}
inline std::string* MsgDBUpdatePlayerInfo::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBUpdatePlayerInfo::release_password() {
  // @@protoc_insertion_point(field_release:MsgDBUpdatePlayerInfo.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBUpdatePlayerInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBUpdatePlayerInfo.password)
}

// -------------------------------------------------------------------

// MsgDBMailData

// int32 user_id = 1;
inline void MsgDBMailData::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMailData::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMailData::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBMailData.user_id)
  return _internal_user_id();
}
inline void MsgDBMailData::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBMailData::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBMailData.user_id)
}

// int32 mail_id = 2;
inline void MsgDBMailData::clear_mail_id() {
  mail_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMailData::_internal_mail_id() const {
  return mail_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMailData::mail_id() const {
  // @@protoc_insertion_point(field_get:MsgDBMailData.mail_id)
  return _internal_mail_id();
}
inline void MsgDBMailData::_internal_set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mail_id_ = value;
}
inline void MsgDBMailData::set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mail_id(value);
  // @@protoc_insertion_point(field_set:MsgDBMailData.mail_id)
}

// -------------------------------------------------------------------

// MsgDBModifyBankGold

// int32 type = 1;
inline void MsgDBModifyBankGold::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBModifyBankGold::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBModifyBankGold::type() const {
  // @@protoc_insertion_point(field_get:MsgDBModifyBankGold.type)
  return _internal_type();
}
inline void MsgDBModifyBankGold::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void MsgDBModifyBankGold::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MsgDBModifyBankGold.type)
}

// int64 gold = 2;
inline void MsgDBModifyBankGold::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBModifyBankGold::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBModifyBankGold::gold() const {
  // @@protoc_insertion_point(field_get:MsgDBModifyBankGold.gold)
  return _internal_gold();
}
inline void MsgDBModifyBankGold::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgDBModifyBankGold::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgDBModifyBankGold.gold)
}

// int32 user_id = 3;
inline void MsgDBModifyBankGold::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBModifyBankGold::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBModifyBankGold::user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBModifyBankGold.user_id)
  return _internal_user_id();
}
inline void MsgDBModifyBankGold::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void MsgDBModifyBankGold::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBModifyBankGold.user_id)
}

// -------------------------------------------------------------------

// MsgDBSendUserGold

// int32 send_user_id = 1;
inline void MsgDBSendUserGold::clear_send_user_id() {
  send_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBSendUserGold::_internal_send_user_id() const {
  return send_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBSendUserGold::send_user_id() const {
  // @@protoc_insertion_point(field_get:MsgDBSendUserGold.send_user_id)
  return _internal_send_user_id();
}
inline void MsgDBSendUserGold::_internal_set_send_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  send_user_id_ = value;
}
inline void MsgDBSendUserGold::set_send_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_user_id(value);
  // @@protoc_insertion_point(field_set:MsgDBSendUserGold.send_user_id)
}

// int32 recver_beautiful_id = 2;
inline void MsgDBSendUserGold::clear_recver_beautiful_id() {
  recver_beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBSendUserGold::_internal_recver_beautiful_id() const {
  return recver_beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBSendUserGold::recver_beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgDBSendUserGold.recver_beautiful_id)
  return _internal_recver_beautiful_id();
}
inline void MsgDBSendUserGold::_internal_set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recver_beautiful_id_ = value;
}
inline void MsgDBSendUserGold::set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recver_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgDBSendUserGold.recver_beautiful_id)
}

// int64 gold = 3;
inline void MsgDBSendUserGold::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBSendUserGold::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBSendUserGold::gold() const {
  // @@protoc_insertion_point(field_get:MsgDBSendUserGold.gold)
  return _internal_gold();
}
inline void MsgDBSendUserGold::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgDBSendUserGold::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgDBSendUserGold.gold)
}

// -------------------------------------------------------------------

// MsgDBMail

// int32 mail_guid = 1;
inline void MsgDBMail::clear_mail_guid() {
  mail_guid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::_internal_mail_guid() const {
  return mail_guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::mail_guid() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.mail_guid)
  return _internal_mail_guid();
}
inline void MsgDBMail::_internal_set_mail_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mail_guid_ = value;
}
inline void MsgDBMail::set_mail_guid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mail_guid(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.mail_guid)
}

// int32 mail_id = 2;
inline void MsgDBMail::clear_mail_id() {
  mail_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::_internal_mail_id() const {
  return mail_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::mail_id() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.mail_id)
  return _internal_mail_id();
}
inline void MsgDBMail::_internal_set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mail_id_ = value;
}
inline void MsgDBMail::set_mail_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mail_id(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.mail_id)
}

// int32 sender_id = 3;
inline void MsgDBMail::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::sender_id() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.sender_id)
  return _internal_sender_id();
}
inline void MsgDBMail::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void MsgDBMail::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.sender_id)
}

// int32 recver_beautiful_id = 4;
inline void MsgDBMail::clear_recver_beautiful_id() {
  recver_beautiful_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::_internal_recver_beautiful_id() const {
  return recver_beautiful_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::recver_beautiful_id() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.recver_beautiful_id)
  return _internal_recver_beautiful_id();
}
inline void MsgDBMail::_internal_set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recver_beautiful_id_ = value;
}
inline void MsgDBMail::set_recver_beautiful_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recver_beautiful_id(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.recver_beautiful_id)
}

// string mail_title = 5;
inline void MsgDBMail::clear_mail_title() {
  mail_title_.ClearToEmpty();
}
inline const std::string& MsgDBMail::mail_title() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.mail_title)
  return _internal_mail_title();
}
inline void MsgDBMail::set_mail_title(const std::string& value) {
  _internal_set_mail_title(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.mail_title)
}
inline std::string* MsgDBMail::mutable_mail_title() {
  // @@protoc_insertion_point(field_mutable:MsgDBMail.mail_title)
  return _internal_mutable_mail_title();
}
inline const std::string& MsgDBMail::_internal_mail_title() const {
  return mail_title_.Get();
}
inline void MsgDBMail::_internal_set_mail_title(const std::string& value) {
  
  mail_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBMail::set_mail_title(std::string&& value) {
  
  mail_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBMail.mail_title)
}
inline void MsgDBMail::set_mail_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBMail.mail_title)
}
inline void MsgDBMail::set_mail_title(const char* value,
    size_t size) {
  
  mail_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBMail.mail_title)
}
inline std::string* MsgDBMail::_internal_mutable_mail_title() {
  
  return mail_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBMail::release_mail_title() {
  // @@protoc_insertion_point(field_release:MsgDBMail.mail_title)
  return mail_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBMail::set_allocated_mail_title(std::string* mail_title) {
  if (mail_title != nullptr) {
    
  } else {
    
  }
  mail_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBMail.mail_title)
}

// string mail_content = 6;
inline void MsgDBMail::clear_mail_content() {
  mail_content_.ClearToEmpty();
}
inline const std::string& MsgDBMail::mail_content() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.mail_content)
  return _internal_mail_content();
}
inline void MsgDBMail::set_mail_content(const std::string& value) {
  _internal_set_mail_content(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.mail_content)
}
inline std::string* MsgDBMail::mutable_mail_content() {
  // @@protoc_insertion_point(field_mutable:MsgDBMail.mail_content)
  return _internal_mutable_mail_content();
}
inline const std::string& MsgDBMail::_internal_mail_content() const {
  return mail_content_.Get();
}
inline void MsgDBMail::_internal_set_mail_content(const std::string& value) {
  
  mail_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBMail::set_mail_content(std::string&& value) {
  
  mail_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBMail.mail_content)
}
inline void MsgDBMail::set_mail_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mail_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBMail.mail_content)
}
inline void MsgDBMail::set_mail_content(const char* value,
    size_t size) {
  
  mail_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBMail.mail_content)
}
inline std::string* MsgDBMail::_internal_mutable_mail_content() {
  
  return mail_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBMail::release_mail_content() {
  // @@protoc_insertion_point(field_release:MsgDBMail.mail_content)
  return mail_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBMail::set_allocated_mail_content(std::string* mail_content) {
  if (mail_content != nullptr) {
    
  } else {
    
  }
  mail_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mail_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBMail.mail_content)
}

// int64 gold = 7;
inline void MsgDBMail::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBMail::_internal_gold() const {
  return gold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBMail::gold() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.gold)
  return _internal_gold();
}
inline void MsgDBMail::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
}
inline void MsgDBMail::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.gold)
}

// int64 send_time = 8;
inline void MsgDBMail::clear_send_time() {
  send_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBMail::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MsgDBMail::send_time() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.send_time)
  return _internal_send_time();
}
inline void MsgDBMail::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  send_time_ = value;
}
inline void MsgDBMail::set_send_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.send_time)
}

// int32 is_custom = 9;
inline void MsgDBMail::clear_is_custom() {
  is_custom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::_internal_is_custom() const {
  return is_custom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBMail::is_custom() const {
  // @@protoc_insertion_point(field_get:MsgDBMail.is_custom)
  return _internal_is_custom();
}
inline void MsgDBMail::_internal_set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_custom_ = value;
}
inline void MsgDBMail::set_is_custom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_custom(value);
  // @@protoc_insertion_point(field_set:MsgDBMail.is_custom)
}

// -------------------------------------------------------------------

// MsgDBRegisterGame

// int32 server_id = 1;
inline void MsgDBRegisterGame::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterGame::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBRegisterGame::server_id() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterGame.server_id)
  return _internal_server_id();
}
inline void MsgDBRegisterGame::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgDBRegisterGame::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterGame.server_id)
}

// string server_name = 2;
inline void MsgDBRegisterGame::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& MsgDBRegisterGame::server_name() const {
  // @@protoc_insertion_point(field_get:MsgDBRegisterGame.server_name)
  return _internal_server_name();
}
inline void MsgDBRegisterGame::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:MsgDBRegisterGame.server_name)
}
inline std::string* MsgDBRegisterGame::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:MsgDBRegisterGame.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& MsgDBRegisterGame::_internal_server_name() const {
  return server_name_.Get();
}
inline void MsgDBRegisterGame::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgDBRegisterGame::set_server_name(std::string&& value) {
  
  server_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MsgDBRegisterGame.server_name)
}
inline void MsgDBRegisterGame::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:MsgDBRegisterGame.server_name)
}
inline void MsgDBRegisterGame::set_server_name(const char* value,
    size_t size) {
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MsgDBRegisterGame.server_name)
}
inline std::string* MsgDBRegisterGame::_internal_mutable_server_name() {
  
  return server_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgDBRegisterGame::release_server_name() {
  // @@protoc_insertion_point(field_release:MsgDBRegisterGame.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgDBRegisterGame::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MsgDBRegisterGame.server_name)
}

// -------------------------------------------------------------------

// MsgDBLoadRobot

// repeated int32 user_id = 1;
inline int MsgDBLoadRobot::_internal_user_id_size() const {
  return user_id_.size();
}
inline int MsgDBLoadRobot::user_id_size() const {
  return _internal_user_id_size();
}
inline void MsgDBLoadRobot::clear_user_id() {
  user_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoadRobot::_internal_user_id(int index) const {
  return user_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgDBLoadRobot::user_id(int index) const {
  // @@protoc_insertion_point(field_get:MsgDBLoadRobot.user_id)
  return _internal_user_id(index);
}
inline void MsgDBLoadRobot::set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgDBLoadRobot.user_id)
}
inline void MsgDBLoadRobot::_internal_add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_id_.Add(value);
}
inline void MsgDBLoadRobot::add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_user_id(value);
  // @@protoc_insertion_point(field_add:MsgDBLoadRobot.user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgDBLoadRobot::_internal_user_id() const {
  return user_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgDBLoadRobot::user_id() const {
  // @@protoc_insertion_point(field_list:MsgDBLoadRobot.user_id)
  return _internal_user_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgDBLoadRobot::_internal_mutable_user_id() {
  return &user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgDBLoadRobot::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:MsgDBLoadRobot.user_id)
  return _internal_mutable_user_id();
}

// -------------------------------------------------------------------

// MsgCreateRobot

// int32 server_id = 1;
inline void MsgCreateRobot::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::server_id() const {
  // @@protoc_insertion_point(field_get:MsgCreateRobot.server_id)
  return _internal_server_id();
}
inline void MsgCreateRobot::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgCreateRobot::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgCreateRobot.server_id)
}

// int32 generate_num = 2;
inline void MsgCreateRobot::clear_generate_num() {
  generate_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::_internal_generate_num() const {
  return generate_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::generate_num() const {
  // @@protoc_insertion_point(field_get:MsgCreateRobot.generate_num)
  return _internal_generate_num();
}
inline void MsgCreateRobot::_internal_set_generate_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  generate_num_ = value;
}
inline void MsgCreateRobot::set_generate_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_generate_num(value);
  // @@protoc_insertion_point(field_set:MsgCreateRobot.generate_num)
}

// int32 client_socket_id = 3;
inline void MsgCreateRobot::clear_client_socket_id() {
  client_socket_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::_internal_client_socket_id() const {
  return client_socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobot::client_socket_id() const {
  // @@protoc_insertion_point(field_get:MsgCreateRobot.client_socket_id)
  return _internal_client_socket_id();
}
inline void MsgCreateRobot::_internal_set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_socket_id_ = value;
}
inline void MsgCreateRobot::set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_socket_id(value);
  // @@protoc_insertion_point(field_set:MsgCreateRobot.client_socket_id)
}

// -------------------------------------------------------------------

// MsgCreateRobotResp

// int32 server_id = 1;
inline void MsgCreateRobotResp::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::server_id() const {
  // @@protoc_insertion_point(field_get:MsgCreateRobotResp.server_id)
  return _internal_server_id();
}
inline void MsgCreateRobotResp::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void MsgCreateRobotResp::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:MsgCreateRobotResp.server_id)
}

// repeated int32 user_id = 2;
inline int MsgCreateRobotResp::_internal_user_id_size() const {
  return user_id_.size();
}
inline int MsgCreateRobotResp::user_id_size() const {
  return _internal_user_id_size();
}
inline void MsgCreateRobotResp::clear_user_id() {
  user_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::_internal_user_id(int index) const {
  return user_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::user_id(int index) const {
  // @@protoc_insertion_point(field_get:MsgCreateRobotResp.user_id)
  return _internal_user_id(index);
}
inline void MsgCreateRobotResp::set_user_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MsgCreateRobotResp.user_id)
}
inline void MsgCreateRobotResp::_internal_add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  user_id_.Add(value);
}
inline void MsgCreateRobotResp::add_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_user_id(value);
  // @@protoc_insertion_point(field_add:MsgCreateRobotResp.user_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgCreateRobotResp::_internal_user_id() const {
  return user_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MsgCreateRobotResp::user_id() const {
  // @@protoc_insertion_point(field_list:MsgCreateRobotResp.user_id)
  return _internal_user_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgCreateRobotResp::_internal_mutable_user_id() {
  return &user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MsgCreateRobotResp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:MsgCreateRobotResp.user_id)
  return _internal_mutable_user_id();
}

// int32 client_socket_id = 3;
inline void MsgCreateRobotResp::clear_client_socket_id() {
  client_socket_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::_internal_client_socket_id() const {
  return client_socket_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MsgCreateRobotResp::client_socket_id() const {
  // @@protoc_insertion_point(field_get:MsgCreateRobotResp.client_socket_id)
  return _internal_client_socket_id();
}
inline void MsgCreateRobotResp::_internal_set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_socket_id_ = value;
}
inline void MsgCreateRobotResp::set_client_socket_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_socket_id(value);
  // @@protoc_insertion_point(field_set:MsgCreateRobotResp.client_socket_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerInternalProto_2eproto
