// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerInternalProto.proto

#include "ServerInternalProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ServerInternalProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto;
class MsgRegisterLoginServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRegisterLoginServer> _instance;
} _MsgRegisterLoginServer_default_instance_;
class MsgRegisterGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRegisterGameServer> _instance;
} _MsgRegisterGameServer_default_instance_;
class MsgApplyRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgApplyRobot> _instance;
} _MsgApplyRobot_default_instance_;
class MsgApplyRobotRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgApplyRobotResp> _instance;
} _MsgApplyRobotResp_default_instance_;
class MsgDBUpdateOnlineNumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBUpdateOnlineNum> _instance;
} _MsgDBUpdateOnlineNum_default_instance_;
class MsgDBRegisterLoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBRegisterLogin> _instance;
} _MsgDBRegisterLogin_default_instance_;
class MsgPlayerAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgPlayerAttribute> _instance;
} _MsgPlayerAttribute_default_instance_;
class MsgLoginPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgLoginPlayerInfo> _instance;
} _MsgLoginPlayerInfo_default_instance_;
class MsgGamePlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgGamePlayerInfo> _instance;
} _MsgGamePlayerInfo_default_instance_;
class MsgDBLoginOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBLoginOut> _instance;
} _MsgDBLoginOut_default_instance_;
class MsgDBUpdatePlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBUpdatePlayerInfo> _instance;
} _MsgDBUpdatePlayerInfo_default_instance_;
class MsgDBMailDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBMailData> _instance;
} _MsgDBMailData_default_instance_;
class MsgDBModifyBankGoldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBModifyBankGold> _instance;
} _MsgDBModifyBankGold_default_instance_;
class MsgDBSendUserGoldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBSendUserGold> _instance;
} _MsgDBSendUserGold_default_instance_;
class MsgDBMailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBMail> _instance;
} _MsgDBMail_default_instance_;
class MsgDBRegisterGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBRegisterGame> _instance;
} _MsgDBRegisterGame_default_instance_;
class MsgDBLoadRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgDBLoadRobot> _instance;
} _MsgDBLoadRobot_default_instance_;
class MsgCreateRobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCreateRobot> _instance;
} _MsgCreateRobot_default_instance_;
class MsgCreateRobotRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgCreateRobotResp> _instance;
} _MsgCreateRobotResp_default_instance_;
static void InitDefaultsscc_info_MsgApplyRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgApplyRobot_default_instance_;
    new (ptr) ::MsgApplyRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgApplyRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgApplyRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgApplyRobotResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgApplyRobotResp_default_instance_;
    new (ptr) ::MsgApplyRobotResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgApplyRobotResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgCreateRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCreateRobot_default_instance_;
    new (ptr) ::MsgCreateRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCreateRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCreateRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgCreateRobotResp_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgCreateRobotResp_default_instance_;
    new (ptr) ::MsgCreateRobotResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgCreateRobotResp_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBLoadRobot_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBLoadRobot_default_instance_;
    new (ptr) ::MsgDBLoadRobot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBLoadRobot_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBLoginOut_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBLoginOut_default_instance_;
    new (ptr) ::MsgDBLoginOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBLoginOut_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBLoginOut_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBMail_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBMail_default_instance_;
    new (ptr) ::MsgDBMail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBMail_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBMail_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBMailData_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBMailData_default_instance_;
    new (ptr) ::MsgDBMailData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBMailData_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBMailData_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBModifyBankGold_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBModifyBankGold_default_instance_;
    new (ptr) ::MsgDBModifyBankGold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBModifyBankGold_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBModifyBankGold_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBRegisterGame_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBRegisterGame_default_instance_;
    new (ptr) ::MsgDBRegisterGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBRegisterGame_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBRegisterLogin_default_instance_;
    new (ptr) ::MsgDBRegisterLogin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBSendUserGold_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBSendUserGold_default_instance_;
    new (ptr) ::MsgDBSendUserGold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBSendUserGold_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBSendUserGold_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBUpdateOnlineNum_default_instance_;
    new (ptr) ::MsgDBUpdateOnlineNum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgDBUpdatePlayerInfo_default_instance_;
    new (ptr) ::MsgDBUpdatePlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgGamePlayerInfo_default_instance_;
    new (ptr) ::MsgGamePlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto}, {
      &scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base,}};

static void InitDefaultsscc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgLoginPlayerInfo_default_instance_;
    new (ptr) ::MsgLoginPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto}, {
      &scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base,}};

static void InitDefaultsscc_info_MsgPlayerAttribute_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgPlayerAttribute_default_instance_;
    new (ptr) ::MsgPlayerAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgPlayerAttribute_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRegisterGameServer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRegisterGameServer_default_instance_;
    new (ptr) ::MsgRegisterGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRegisterGameServer_ServerInternalProto_2eproto}, {}};

static void InitDefaultsscc_info_MsgRegisterLoginServer_ServerInternalProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MsgRegisterLoginServer_default_instance_;
    new (ptr) ::MsgRegisterLoginServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRegisterLoginServer_ServerInternalProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRegisterLoginServer_ServerInternalProto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServerInternalProto_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ServerInternalProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServerInternalProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ServerInternalProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterLoginServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterLoginServer, ip_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterLoginServer, port_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterLoginServer, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, ip_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, port_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, kind_id_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, room_level_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, limit_gold_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, max_player_),
  PROTOBUF_FIELD_OFFSET(::MsgRegisterGameServer, room_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobot, apply_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobotResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgApplyRobotResp, robot_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, port_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdateOnlineNum, online_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterLogin, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, bank_coin_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, head_id_),
  PROTOBUF_FIELD_OFFSET(::MsgPlayerAttribute, nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgLoginPlayerInfo, player_attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgGamePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgGamePlayerInfo, player_attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBLoginOut, online_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, user_type_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, phone_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, head_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, nickname_),
  PROTOBUF_FIELD_OFFSET(::MsgDBUpdatePlayerInfo, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMailData, mail_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyBankGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyBankGold, type_),
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyBankGold, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBModifyBankGold, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBSendUserGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBSendUserGold, send_user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBSendUserGold, recver_beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBSendUserGold, gold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_guid_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, sender_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, recver_beautiful_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_title_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, mail_content_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, gold_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, send_time_),
  PROTOBUF_FIELD_OFFSET(::MsgDBMail, is_custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgDBRegisterGame, server_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoadRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgDBLoadRobot, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, generate_num_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobot, client_socket_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, server_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, user_id_),
  PROTOBUF_FIELD_OFFSET(::MsgCreateRobotResp, client_socket_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MsgRegisterLoginServer)},
  { 8, -1, sizeof(::MsgRegisterGameServer)},
  { 21, -1, sizeof(::MsgApplyRobot)},
  { 28, -1, sizeof(::MsgApplyRobotResp)},
  { 34, -1, sizeof(::MsgDBUpdateOnlineNum)},
  { 42, -1, sizeof(::MsgDBRegisterLogin)},
  { 49, -1, sizeof(::MsgPlayerAttribute)},
  { 62, -1, sizeof(::MsgLoginPlayerInfo)},
  { 68, -1, sizeof(::MsgGamePlayerInfo)},
  { 74, -1, sizeof(::MsgDBLoginOut)},
  { 81, -1, sizeof(::MsgDBUpdatePlayerInfo)},
  { 93, -1, sizeof(::MsgDBMailData)},
  { 100, -1, sizeof(::MsgDBModifyBankGold)},
  { 108, -1, sizeof(::MsgDBSendUserGold)},
  { 116, -1, sizeof(::MsgDBMail)},
  { 130, -1, sizeof(::MsgDBRegisterGame)},
  { 137, -1, sizeof(::MsgDBLoadRobot)},
  { 143, -1, sizeof(::MsgCreateRobot)},
  { 151, -1, sizeof(::MsgCreateRobotResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRegisterLoginServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgRegisterGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgApplyRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgApplyRobotResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBUpdateOnlineNum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBRegisterLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgPlayerAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgLoginPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgGamePlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBLoginOut_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBUpdatePlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBMailData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBModifyBankGold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBSendUserGold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBMail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBRegisterGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgDBLoadRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCreateRobot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MsgCreateRobotResp_default_instance_),
};

const char descriptor_table_protodef_ServerInternalProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ServerInternalProto.proto\"E\n\026MsgRegist"
  "erLoginServer\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022"
  "\021\n\tserver_id\030\003 \001(\005\"\244\001\n\025MsgRegisterGameSe"
  "rver\022\n\n\002ip\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\021\n\tserver"
  "_id\030\003 \001(\005\022\017\n\007kind_id\030\004 \001(\005\022\022\n\nroom_level"
  "\030\005 \001(\005\022\022\n\nlimit_gold\030\006 \001(\005\022\022\n\nmax_player"
  "\030\007 \001(\005\022\021\n\troom_name\030\010 \001(\t\"5\n\rMsgApplyRob"
  "ot\022\021\n\tserver_id\030\001 \001(\005\022\021\n\tapply_num\030\002 \001(\005"
  "\"*\n\021MsgApplyRobotResp\022\025\n\rrobot_user_id\030\001"
  " \003(\005\"K\n\024MsgDBUpdateOnlineNum\022\021\n\tserver_i"
  "d\030\001 \001(\005\022\014\n\004port\030\002 \001(\005\022\022\n\nonline_num\030\003 \001("
  "\005\"5\n\022MsgDBRegisterLogin\022\021\n\tserver_id\030\001 \001"
  "(\005\022\014\n\004port\030\002 \001(\005\"\241\001\n\022MsgPlayerAttribute\022"
  "\017\n\007user_id\030\001 \001(\005\022\024\n\014beautiful_id\030\002 \001(\005\022\021"
  "\n\tuser_type\030\003 \001(\005\022\r\n\005phone\030\004 \001(\t\022\014\n\004coin"
  "\030\005 \001(\003\022\021\n\tbank_coin\030\006 \001(\003\022\017\n\007head_id\030\007 \001"
  "(\005\022\020\n\010nickname\030\010 \001(\t\"C\n\022MsgLoginPlayerIn"
  "fo\022-\n\020player_attribute\030\001 \001(\0132\023.MsgPlayer"
  "Attribute\"B\n\021MsgGamePlayerInfo\022-\n\020player"
  "_attribute\030\001 \001(\0132\023.MsgPlayerAttribute\"5\n"
  "\rMsgDBLoginOut\022\017\n\007user_id\030\001 \001(\005\022\023\n\013onlin"
  "e_time\030\002 \001(\005\"\225\001\n\025MsgDBUpdatePlayerInfo\022\017"
  "\n\007user_id\030\001 \001(\005\022\024\n\014beautiful_id\030\002 \001(\005\022\021\n"
  "\tuser_type\030\003 \001(\005\022\r\n\005phone\030\004 \001(\t\022\017\n\007head_"
  "id\030\005 \001(\005\022\020\n\010nickname\030\006 \001(\t\022\020\n\010password\030\007"
  " \001(\t\"1\n\rMsgDBMailData\022\017\n\007user_id\030\001 \001(\005\022\017"
  "\n\007mail_id\030\002 \001(\005\"B\n\023MsgDBModifyBankGold\022\014"
  "\n\004type\030\001 \001(\005\022\014\n\004gold\030\002 \001(\003\022\017\n\007user_id\030\003 "
  "\001(\005\"T\n\021MsgDBSendUserGold\022\024\n\014send_user_id"
  "\030\001 \001(\005\022\033\n\023recver_beautiful_id\030\002 \001(\005\022\014\n\004g"
  "old\030\003 \001(\003\"\275\001\n\tMsgDBMail\022\021\n\tmail_guid\030\001 \001"
  "(\005\022\017\n\007mail_id\030\002 \001(\005\022\021\n\tsender_id\030\003 \001(\005\022\033"
  "\n\023recver_beautiful_id\030\004 \001(\005\022\022\n\nmail_titl"
  "e\030\005 \001(\t\022\024\n\014mail_content\030\006 \001(\t\022\014\n\004gold\030\007 "
  "\001(\003\022\021\n\tsend_time\030\010 \001(\003\022\021\n\tis_custom\030\t \001("
  "\005\";\n\021MsgDBRegisterGame\022\021\n\tserver_id\030\001 \001("
  "\005\022\023\n\013server_name\030\002 \001(\t\"!\n\016MsgDBLoadRobot"
  "\022\017\n\007user_id\030\001 \003(\005\"S\n\016MsgCreateRobot\022\021\n\ts"
  "erver_id\030\001 \001(\005\022\024\n\014generate_num\030\002 \001(\005\022\030\n\020"
  "client_socket_id\030\003 \001(\005\"R\n\022MsgCreateRobot"
  "Resp\022\021\n\tserver_id\030\001 \001(\005\022\017\n\007user_id\030\002 \003(\005"
  "\022\030\n\020client_socket_id\030\003 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServerInternalProto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ServerInternalProto_2eproto_sccs[19] = {
  &scc_info_MsgApplyRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgCreateRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBLoginOut_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBMail_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBMailData_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBModifyBankGold_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBSendUserGold_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto.base,
  &scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base,
  &scc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto.base,
  &scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base,
  &scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base,
  &scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base,
  &scc_info_MsgRegisterLoginServer_ServerInternalProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServerInternalProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerInternalProto_2eproto = {
  false, false, descriptor_table_protodef_ServerInternalProto_2eproto, "ServerInternalProto.proto", 1674,
  &descriptor_table_ServerInternalProto_2eproto_once, descriptor_table_ServerInternalProto_2eproto_sccs, descriptor_table_ServerInternalProto_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_ServerInternalProto_2eproto::offsets,
  file_level_metadata_ServerInternalProto_2eproto, 19, file_level_enum_descriptors_ServerInternalProto_2eproto, file_level_service_descriptors_ServerInternalProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ServerInternalProto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ServerInternalProto_2eproto)), true);

// ===================================================================

class MsgRegisterLoginServer::_Internal {
 public:
};

MsgRegisterLoginServer::MsgRegisterLoginServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRegisterLoginServer)
}
MsgRegisterLoginServer::MsgRegisterLoginServer(const MsgRegisterLoginServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:MsgRegisterLoginServer)
}

void MsgRegisterLoginServer::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
}

MsgRegisterLoginServer::~MsgRegisterLoginServer() {
  // @@protoc_insertion_point(destructor:MsgRegisterLoginServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRegisterLoginServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgRegisterLoginServer::ArenaDtor(void* object) {
  MsgRegisterLoginServer* _this = reinterpret_cast< MsgRegisterLoginServer* >(object);
  (void)_this;
}
void MsgRegisterLoginServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRegisterLoginServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRegisterLoginServer& MsgRegisterLoginServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRegisterLoginServer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRegisterLoginServer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRegisterLoginServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterLoginServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRegisterLoginServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRegisterLoginServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRegisterLoginServer)
  return target;
}

size_t MsgRegisterLoginServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRegisterLoginServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRegisterLoginServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRegisterLoginServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRegisterLoginServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRegisterLoginServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRegisterLoginServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRegisterLoginServer)
    MergeFrom(*source);
  }
}

void MsgRegisterLoginServer::MergeFrom(const MsgRegisterLoginServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRegisterLoginServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void MsgRegisterLoginServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRegisterLoginServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterLoginServer::CopyFrom(const MsgRegisterLoginServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRegisterLoginServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterLoginServer::IsInitialized() const {
  return true;
}

void MsgRegisterLoginServer::InternalSwap(MsgRegisterLoginServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRegisterLoginServer, server_id_)
      + sizeof(MsgRegisterLoginServer::server_id_)
      - PROTOBUF_FIELD_OFFSET(MsgRegisterLoginServer, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterLoginServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgRegisterGameServer::_Internal {
 public:
};

MsgRegisterGameServer::MsgRegisterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgRegisterGameServer)
}
MsgRegisterGameServer::MsgRegisterGameServer(const MsgRegisterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_room_name().empty()) {
    room_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_room_name(), 
      GetArena());
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  // @@protoc_insertion_point(copy_constructor:MsgRegisterGameServer)
}

void MsgRegisterGameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base);
  room_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
}

MsgRegisterGameServer::~MsgRegisterGameServer() {
  // @@protoc_insertion_point(destructor:MsgRegisterGameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgRegisterGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  room_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRegisterGameServer::ArenaDtor(void* object) {
  MsgRegisterGameServer* _this = reinterpret_cast< MsgRegisterGameServer* >(object);
  (void)_this;
}
void MsgRegisterGameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgRegisterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRegisterGameServer& MsgRegisterGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRegisterGameServer_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgRegisterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgRegisterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmpty();
  ::memset(&ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_player_) -
      reinterpret_cast<char*>(&ip_)) + sizeof(max_player_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kind_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          kind_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 room_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          room_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit_gold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          limit_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_player = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string room_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_room_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgRegisterGameServer.room_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRegisterGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgRegisterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ip = 1;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_id(), target);
  }

  // int32 kind_id = 4;
  if (this->kind_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_kind_id(), target);
  }

  // int32 room_level = 5;
  if (this->room_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_room_level(), target);
  }

  // int32 limit_gold = 6;
  if (this->limit_gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_limit_gold(), target);
  }

  // int32 max_player = 7;
  if (this->max_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_player(), target);
  }

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_name().data(), static_cast<int>(this->_internal_room_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgRegisterGameServer.room_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_room_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgRegisterGameServer)
  return target;
}

size_t MsgRegisterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgRegisterGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_name = 8;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_name());
  }

  // int32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 kind_id = 4;
  if (this->kind_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kind_id());
  }

  // int32 room_level = 5;
  if (this->room_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_room_level());
  }

  // int32 limit_gold = 6;
  if (this->limit_gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit_gold());
  }

  // int32 max_player = 7;
  if (this->max_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_player());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRegisterGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgRegisterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRegisterGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRegisterGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgRegisterGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgRegisterGameServer)
    MergeFrom(*source);
  }
}

void MsgRegisterGameServer::MergeFrom(const MsgRegisterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgRegisterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_name().size() > 0) {
    _internal_set_room_name(from._internal_room_name());
  }
  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.kind_id() != 0) {
    _internal_set_kind_id(from._internal_kind_id());
  }
  if (from.room_level() != 0) {
    _internal_set_room_level(from._internal_room_level());
  }
  if (from.limit_gold() != 0) {
    _internal_set_limit_gold(from._internal_limit_gold());
  }
  if (from.max_player() != 0) {
    _internal_set_max_player(from._internal_max_player());
  }
}

void MsgRegisterGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgRegisterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRegisterGameServer::CopyFrom(const MsgRegisterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgRegisterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterGameServer::IsInitialized() const {
  return true;
}

void MsgRegisterGameServer::InternalSwap(MsgRegisterGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  room_name_.Swap(&other->room_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRegisterGameServer, max_player_)
      + sizeof(MsgRegisterGameServer::max_player_)
      - PROTOBUF_FIELD_OFFSET(MsgRegisterGameServer, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgApplyRobot::_Internal {
 public:
};

MsgApplyRobot::MsgApplyRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgApplyRobot)
}
MsgApplyRobot::MsgApplyRobot(const MsgApplyRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&apply_num_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
  // @@protoc_insertion_point(copy_constructor:MsgApplyRobot)
}

void MsgApplyRobot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&apply_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
}

MsgApplyRobot::~MsgApplyRobot() {
  // @@protoc_insertion_point(destructor:MsgApplyRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgApplyRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgApplyRobot::ArenaDtor(void* object) {
  MsgApplyRobot* _this = reinterpret_cast< MsgApplyRobot* >(object);
  (void)_this;
}
void MsgApplyRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgApplyRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgApplyRobot& MsgApplyRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgApplyRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgApplyRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgApplyRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&apply_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(apply_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgApplyRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 apply_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          apply_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgApplyRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgApplyRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 apply_num = 2;
  if (this->apply_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_apply_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgApplyRobot)
  return target;
}

size_t MsgApplyRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgApplyRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 apply_num = 2;
  if (this->apply_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_apply_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgApplyRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgApplyRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgApplyRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgApplyRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgApplyRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgApplyRobot)
    MergeFrom(*source);
  }
}

void MsgApplyRobot::MergeFrom(const MsgApplyRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgApplyRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.apply_num() != 0) {
    _internal_set_apply_num(from._internal_apply_num());
  }
}

void MsgApplyRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgApplyRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyRobot::CopyFrom(const MsgApplyRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgApplyRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyRobot::IsInitialized() const {
  return true;
}

void MsgApplyRobot::InternalSwap(MsgApplyRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgApplyRobot, apply_num_)
      + sizeof(MsgApplyRobot::apply_num_)
      - PROTOBUF_FIELD_OFFSET(MsgApplyRobot, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgApplyRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgApplyRobotResp::_Internal {
 public:
};

MsgApplyRobotResp::MsgApplyRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robot_user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgApplyRobotResp)
}
MsgApplyRobotResp::MsgApplyRobotResp(const MsgApplyRobotResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robot_user_id_(from.robot_user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgApplyRobotResp)
}

void MsgApplyRobotResp::SharedCtor() {
}

MsgApplyRobotResp::~MsgApplyRobotResp() {
  // @@protoc_insertion_point(destructor:MsgApplyRobotResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgApplyRobotResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgApplyRobotResp::ArenaDtor(void* object) {
  MsgApplyRobotResp* _this = reinterpret_cast< MsgApplyRobotResp* >(object);
  (void)_this;
}
void MsgApplyRobotResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgApplyRobotResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgApplyRobotResp& MsgApplyRobotResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgApplyRobotResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgApplyRobotResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgApplyRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_user_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgApplyRobotResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 robot_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_robot_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_robot_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgApplyRobotResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgApplyRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 robot_user_id = 1;
  {
    int byte_size = _robot_user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_robot_user_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgApplyRobotResp)
  return target;
}

size_t MsgApplyRobotResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgApplyRobotResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 robot_user_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->robot_user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _robot_user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgApplyRobotResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgApplyRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgApplyRobotResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgApplyRobotResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgApplyRobotResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgApplyRobotResp)
    MergeFrom(*source);
  }
}

void MsgApplyRobotResp::MergeFrom(const MsgApplyRobotResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgApplyRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_user_id_.MergeFrom(from.robot_user_id_);
}

void MsgApplyRobotResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgApplyRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyRobotResp::CopyFrom(const MsgApplyRobotResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgApplyRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyRobotResp::IsInitialized() const {
  return true;
}

void MsgApplyRobotResp::InternalSwap(MsgApplyRobotResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_user_id_.InternalSwap(&other->robot_user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgApplyRobotResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBUpdateOnlineNum::_Internal {
 public:
};

MsgDBUpdateOnlineNum::MsgDBUpdateOnlineNum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBUpdateOnlineNum)
}
MsgDBUpdateOnlineNum::MsgDBUpdateOnlineNum(const MsgDBUpdateOnlineNum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  // @@protoc_insertion_point(copy_constructor:MsgDBUpdateOnlineNum)
}

void MsgDBUpdateOnlineNum::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
}

MsgDBUpdateOnlineNum::~MsgDBUpdateOnlineNum() {
  // @@protoc_insertion_point(destructor:MsgDBUpdateOnlineNum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBUpdateOnlineNum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBUpdateOnlineNum::ArenaDtor(void* object) {
  MsgDBUpdateOnlineNum* _this = reinterpret_cast< MsgDBUpdateOnlineNum* >(object);
  (void)_this;
}
void MsgDBUpdateOnlineNum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBUpdateOnlineNum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBUpdateOnlineNum& MsgDBUpdateOnlineNum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBUpdateOnlineNum_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBUpdateOnlineNum::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBUpdateOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_num_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(online_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBUpdateOnlineNum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          online_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBUpdateOnlineNum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBUpdateOnlineNum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // int32 online_num = 3;
  if (this->online_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_online_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBUpdateOnlineNum)
  return target;
}

size_t MsgDBUpdateOnlineNum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBUpdateOnlineNum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 online_num = 3;
  if (this->online_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBUpdateOnlineNum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBUpdateOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBUpdateOnlineNum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBUpdateOnlineNum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBUpdateOnlineNum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBUpdateOnlineNum)
    MergeFrom(*source);
  }
}

void MsgDBUpdateOnlineNum::MergeFrom(const MsgDBUpdateOnlineNum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBUpdateOnlineNum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.online_num() != 0) {
    _internal_set_online_num(from._internal_online_num());
  }
}

void MsgDBUpdateOnlineNum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBUpdateOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBUpdateOnlineNum::CopyFrom(const MsgDBUpdateOnlineNum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBUpdateOnlineNum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBUpdateOnlineNum::IsInitialized() const {
  return true;
}

void MsgDBUpdateOnlineNum::InternalSwap(MsgDBUpdateOnlineNum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBUpdateOnlineNum, online_num_)
      + sizeof(MsgDBUpdateOnlineNum::online_num_)
      - PROTOBUF_FIELD_OFFSET(MsgDBUpdateOnlineNum, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBUpdateOnlineNum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBRegisterLogin::_Internal {
 public:
};

MsgDBRegisterLogin::MsgDBRegisterLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBRegisterLogin)
}
MsgDBRegisterLogin::MsgDBRegisterLogin(const MsgDBRegisterLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:MsgDBRegisterLogin)
}

void MsgDBRegisterLogin::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
}

MsgDBRegisterLogin::~MsgDBRegisterLogin() {
  // @@protoc_insertion_point(destructor:MsgDBRegisterLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBRegisterLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBRegisterLogin::ArenaDtor(void* object) {
  MsgDBRegisterLogin* _this = reinterpret_cast< MsgDBRegisterLogin* >(object);
  (void)_this;
}
void MsgDBRegisterLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBRegisterLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBRegisterLogin& MsgDBRegisterLogin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBRegisterLogin_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBRegisterLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBRegisterLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBRegisterLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBRegisterLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBRegisterLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBRegisterLogin)
  return target;
}

size_t MsgDBRegisterLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBRegisterLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBRegisterLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBRegisterLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBRegisterLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBRegisterLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBRegisterLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBRegisterLogin)
    MergeFrom(*source);
  }
}

void MsgDBRegisterLogin::MergeFrom(const MsgDBRegisterLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBRegisterLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void MsgDBRegisterLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBRegisterLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBRegisterLogin::CopyFrom(const MsgDBRegisterLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBRegisterLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBRegisterLogin::IsInitialized() const {
  return true;
}

void MsgDBRegisterLogin::InternalSwap(MsgDBRegisterLogin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBRegisterLogin, port_)
      + sizeof(MsgDBRegisterLogin::port_)
      - PROTOBUF_FIELD_OFFSET(MsgDBRegisterLogin, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBRegisterLogin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgPlayerAttribute::_Internal {
 public:
};

MsgPlayerAttribute::MsgPlayerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgPlayerAttribute)
}
MsgPlayerAttribute::MsgPlayerAttribute(const MsgPlayerAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_coin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
  // @@protoc_insertion_point(copy_constructor:MsgPlayerAttribute)
}

void MsgPlayerAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bank_coin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
}

MsgPlayerAttribute::~MsgPlayerAttribute() {
  // @@protoc_insertion_point(destructor:MsgPlayerAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgPlayerAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgPlayerAttribute::ArenaDtor(void* object) {
  MsgPlayerAttribute* _this = reinterpret_cast< MsgPlayerAttribute* >(object);
  (void)_this;
}
void MsgPlayerAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgPlayerAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgPlayerAttribute& MsgPlayerAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgPlayerAttribute_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgPlayerAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgPlayerAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  nickname_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_coin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(bank_coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlayerAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerAttribute.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 coin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bank_coin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bank_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgPlayerAttribute.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgPlayerAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgPlayerAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beautiful_id(), target);
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_type(), target);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerAttribute.phone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone(), target);
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_coin(), target);
  }

  // int64 bank_coin = 6;
  if (this->bank_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_bank_coin(), target);
  }

  // int32 head_id = 7;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_head_id(), target);
  }

  // string nickname = 8;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgPlayerAttribute.nickname");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgPlayerAttribute)
  return target;
}

size_t MsgPlayerAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgPlayerAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 4;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string nickname = 8;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int64 coin = 5;
  if (this->coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_coin());
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  // int32 head_id = 7;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  // int64 bank_coin = 6;
  if (this->bank_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bank_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgPlayerAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgPlayerAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPlayerAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgPlayerAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgPlayerAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgPlayerAttribute)
    MergeFrom(*source);
  }
}

void MsgPlayerAttribute::MergeFrom(const MsgPlayerAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgPlayerAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
  if (from.bank_coin() != 0) {
    _internal_set_bank_coin(from._internal_bank_coin());
  }
}

void MsgPlayerAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgPlayerAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerAttribute::CopyFrom(const MsgPlayerAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgPlayerAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerAttribute::IsInitialized() const {
  return true;
}

void MsgPlayerAttribute::InternalSwap(MsgPlayerAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPlayerAttribute, bank_coin_)
      + sizeof(MsgPlayerAttribute::bank_coin_)
      - PROTOBUF_FIELD_OFFSET(MsgPlayerAttribute, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlayerAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgLoginPlayerInfo::_Internal {
 public:
  static const ::MsgPlayerAttribute& player_attribute(const MsgLoginPlayerInfo* msg);
};

const ::MsgPlayerAttribute&
MsgLoginPlayerInfo::_Internal::player_attribute(const MsgLoginPlayerInfo* msg) {
  return *msg->player_attribute_;
}
MsgLoginPlayerInfo::MsgLoginPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgLoginPlayerInfo)
}
MsgLoginPlayerInfo::MsgLoginPlayerInfo(const MsgLoginPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_attribute()) {
    player_attribute_ = new ::MsgPlayerAttribute(*from.player_attribute_);
  } else {
    player_attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MsgLoginPlayerInfo)
}

void MsgLoginPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base);
  player_attribute_ = nullptr;
}

MsgLoginPlayerInfo::~MsgLoginPlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgLoginPlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgLoginPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_attribute_;
}

void MsgLoginPlayerInfo::ArenaDtor(void* object) {
  MsgLoginPlayerInfo* _this = reinterpret_cast< MsgLoginPlayerInfo* >(object);
  (void)_this;
}
void MsgLoginPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgLoginPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgLoginPlayerInfo& MsgLoginPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgLoginPlayerInfo_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgLoginPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgLoginPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_attribute_ != nullptr) {
    delete player_attribute_;
  }
  player_attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgLoginPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MsgPlayerAttribute player_attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgLoginPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgLoginPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgPlayerAttribute player_attribute = 1;
  if (this->has_player_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_attribute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgLoginPlayerInfo)
  return target;
}

size_t MsgLoginPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgLoginPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgPlayerAttribute player_attribute = 1;
  if (this->has_player_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_attribute_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgLoginPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgLoginPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgLoginPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgLoginPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgLoginPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgLoginPlayerInfo)
    MergeFrom(*source);
  }
}

void MsgLoginPlayerInfo::MergeFrom(const MsgLoginPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgLoginPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_attribute()) {
    _internal_mutable_player_attribute()->::MsgPlayerAttribute::MergeFrom(from._internal_player_attribute());
  }
}

void MsgLoginPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgLoginPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginPlayerInfo::CopyFrom(const MsgLoginPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgLoginPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginPlayerInfo::IsInitialized() const {
  return true;
}

void MsgLoginPlayerInfo::InternalSwap(MsgLoginPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_attribute_, other->player_attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgLoginPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgGamePlayerInfo::_Internal {
 public:
  static const ::MsgPlayerAttribute& player_attribute(const MsgGamePlayerInfo* msg);
};

const ::MsgPlayerAttribute&
MsgGamePlayerInfo::_Internal::player_attribute(const MsgGamePlayerInfo* msg) {
  return *msg->player_attribute_;
}
MsgGamePlayerInfo::MsgGamePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgGamePlayerInfo)
}
MsgGamePlayerInfo::MsgGamePlayerInfo(const MsgGamePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_attribute()) {
    player_attribute_ = new ::MsgPlayerAttribute(*from.player_attribute_);
  } else {
    player_attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MsgGamePlayerInfo)
}

void MsgGamePlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto.base);
  player_attribute_ = nullptr;
}

MsgGamePlayerInfo::~MsgGamePlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgGamePlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgGamePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_attribute_;
}

void MsgGamePlayerInfo::ArenaDtor(void* object) {
  MsgGamePlayerInfo* _this = reinterpret_cast< MsgGamePlayerInfo* >(object);
  (void)_this;
}
void MsgGamePlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgGamePlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgGamePlayerInfo& MsgGamePlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgGamePlayerInfo_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgGamePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgGamePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_attribute_ != nullptr) {
    delete player_attribute_;
  }
  player_attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGamePlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MsgPlayerAttribute player_attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgGamePlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgGamePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgPlayerAttribute player_attribute = 1;
  if (this->has_player_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_attribute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgGamePlayerInfo)
  return target;
}

size_t MsgGamePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgGamePlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgPlayerAttribute player_attribute = 1;
  if (this->has_player_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_attribute_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgGamePlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgGamePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgGamePlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgGamePlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgGamePlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgGamePlayerInfo)
    MergeFrom(*source);
  }
}

void MsgGamePlayerInfo::MergeFrom(const MsgGamePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgGamePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_attribute()) {
    _internal_mutable_player_attribute()->::MsgPlayerAttribute::MergeFrom(from._internal_player_attribute());
  }
}

void MsgGamePlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgGamePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGamePlayerInfo::CopyFrom(const MsgGamePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgGamePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGamePlayerInfo::IsInitialized() const {
  return true;
}

void MsgGamePlayerInfo::InternalSwap(MsgGamePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_attribute_, other->player_attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGamePlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBLoginOut::_Internal {
 public:
};

MsgDBLoginOut::MsgDBLoginOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBLoginOut)
}
MsgDBLoginOut::MsgDBLoginOut(const MsgDBLoginOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_time_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
  // @@protoc_insertion_point(copy_constructor:MsgDBLoginOut)
}

void MsgDBLoginOut::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&online_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
}

MsgDBLoginOut::~MsgDBLoginOut() {
  // @@protoc_insertion_point(destructor:MsgDBLoginOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBLoginOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBLoginOut::ArenaDtor(void* object) {
  MsgDBLoginOut* _this = reinterpret_cast< MsgDBLoginOut* >(object);
  (void)_this;
}
void MsgDBLoginOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBLoginOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBLoginOut& MsgDBLoginOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBLoginOut_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBLoginOut::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBLoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_time_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(online_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBLoginOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 online_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          online_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBLoginOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBLoginOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 online_time = 2;
  if (this->online_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_online_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBLoginOut)
  return target;
}

size_t MsgDBLoginOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBLoginOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 online_time = 2;
  if (this->online_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_online_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBLoginOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBLoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBLoginOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBLoginOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBLoginOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBLoginOut)
    MergeFrom(*source);
  }
}

void MsgDBLoginOut::MergeFrom(const MsgDBLoginOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBLoginOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.online_time() != 0) {
    _internal_set_online_time(from._internal_online_time());
  }
}

void MsgDBLoginOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBLoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBLoginOut::CopyFrom(const MsgDBLoginOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBLoginOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBLoginOut::IsInitialized() const {
  return true;
}

void MsgDBLoginOut::InternalSwap(MsgDBLoginOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBLoginOut, online_time_)
      + sizeof(MsgDBLoginOut::online_time_)
      - PROTOBUF_FIELD_OFFSET(MsgDBLoginOut, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBLoginOut::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBUpdatePlayerInfo::_Internal {
 public:
};

MsgDBUpdatePlayerInfo::MsgDBUpdatePlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBUpdatePlayerInfo)
}
MsgDBUpdatePlayerInfo::MsgDBUpdatePlayerInfo(const MsgDBUpdatePlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phone().empty()) {
    phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phone(), 
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(head_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBUpdatePlayerInfo)
}

void MsgDBUpdatePlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base);
  phone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&head_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(head_id_));
}

MsgDBUpdatePlayerInfo::~MsgDBUpdatePlayerInfo() {
  // @@protoc_insertion_point(destructor:MsgDBUpdatePlayerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBUpdatePlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBUpdatePlayerInfo::ArenaDtor(void* object) {
  MsgDBUpdatePlayerInfo* _this = reinterpret_cast< MsgDBUpdatePlayerInfo* >(object);
  (void)_this;
}
void MsgDBUpdatePlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBUpdatePlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBUpdatePlayerInfo& MsgDBUpdatePlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBUpdatePlayerInfo_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBUpdatePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBUpdatePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.ClearToEmpty();
  nickname_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(head_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBUpdatePlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_phone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.phone"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 head_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          head_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBUpdatePlayerInfo.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBUpdatePlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBUpdatePlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beautiful_id(), target);
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_type(), target);
  }

  // string phone = 4;
  if (this->phone().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.phone");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_phone(), target);
  }

  // int32 head_id = 5;
  if (this->head_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_head_id(), target);
  }

  // string nickname = 6;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_nickname(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBUpdatePlayerInfo.password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBUpdatePlayerInfo)
  return target;
}

size_t MsgDBUpdatePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBUpdatePlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone = 4;
  if (this->phone().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string nickname = 6;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 beautiful_id = 2;
  if (this->beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_beautiful_id());
  }

  // int32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_type());
  }

  // int32 head_id = 5;
  if (this->head_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_head_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBUpdatePlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBUpdatePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBUpdatePlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBUpdatePlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBUpdatePlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBUpdatePlayerInfo)
    MergeFrom(*source);
  }
}

void MsgDBUpdatePlayerInfo::MergeFrom(const MsgDBUpdatePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBUpdatePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phone().size() > 0) {
    _internal_set_phone(from._internal_phone());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.beautiful_id() != 0) {
    _internal_set_beautiful_id(from._internal_beautiful_id());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.head_id() != 0) {
    _internal_set_head_id(from._internal_head_id());
  }
}

void MsgDBUpdatePlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBUpdatePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBUpdatePlayerInfo::CopyFrom(const MsgDBUpdatePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBUpdatePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBUpdatePlayerInfo::IsInitialized() const {
  return true;
}

void MsgDBUpdatePlayerInfo::InternalSwap(MsgDBUpdatePlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  phone_.Swap(&other->phone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBUpdatePlayerInfo, head_id_)
      + sizeof(MsgDBUpdatePlayerInfo::head_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBUpdatePlayerInfo, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBUpdatePlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBMailData::_Internal {
 public:
};

MsgDBMailData::MsgDBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBMailData)
}
MsgDBMailData::MsgDBMailData(const MsgDBMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mail_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBMailData)
}

void MsgDBMailData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&mail_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
}

MsgDBMailData::~MsgDBMailData() {
  // @@protoc_insertion_point(destructor:MsgDBMailData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBMailData::ArenaDtor(void* object) {
  MsgDBMailData* _this = reinterpret_cast< MsgDBMailData* >(object);
  (void)_this;
}
void MsgDBMailData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBMailData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBMailData& MsgDBMailData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBMailData_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mail_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(mail_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBMailData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mail_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBMailData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBMailData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mail_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBMailData)
  return target;
}

size_t MsgDBMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBMailData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBMailData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBMailData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBMailData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBMailData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBMailData)
    MergeFrom(*source);
  }
}

void MsgDBMailData::MergeFrom(const MsgDBMailData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBMailData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.mail_id() != 0) {
    _internal_set_mail_id(from._internal_mail_id());
  }
}

void MsgDBMailData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBMailData::CopyFrom(const MsgDBMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBMailData::IsInitialized() const {
  return true;
}

void MsgDBMailData::InternalSwap(MsgDBMailData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBMailData, mail_id_)
      + sizeof(MsgDBMailData::mail_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBMailData, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBMailData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBModifyBankGold::_Internal {
 public:
};

MsgDBModifyBankGold::MsgDBModifyBankGold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBModifyBankGold)
}
MsgDBModifyBankGold::MsgDBModifyBankGold(const MsgDBModifyBankGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:MsgDBModifyBankGold)
}

void MsgDBModifyBankGold::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(user_id_));
}

MsgDBModifyBankGold::~MsgDBModifyBankGold() {
  // @@protoc_insertion_point(destructor:MsgDBModifyBankGold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBModifyBankGold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBModifyBankGold::ArenaDtor(void* object) {
  MsgDBModifyBankGold* _this = reinterpret_cast< MsgDBModifyBankGold* >(object);
  (void)_this;
}
void MsgDBModifyBankGold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBModifyBankGold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBModifyBankGold& MsgDBModifyBankGold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBModifyBankGold_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBModifyBankGold::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBModifyBankGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBModifyBankGold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBModifyBankGold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBModifyBankGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int64 gold = 2;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gold(), target);
  }

  // int32 user_id = 3;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBModifyBankGold)
  return target;
}

size_t MsgDBModifyBankGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBModifyBankGold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 gold = 2;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBModifyBankGold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBModifyBankGold)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBModifyBankGold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBModifyBankGold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBModifyBankGold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBModifyBankGold)
    MergeFrom(*source);
  }
}

void MsgDBModifyBankGold::MergeFrom(const MsgDBModifyBankGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBModifyBankGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void MsgDBModifyBankGold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBModifyBankGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBModifyBankGold::CopyFrom(const MsgDBModifyBankGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBModifyBankGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBModifyBankGold::IsInitialized() const {
  return true;
}

void MsgDBModifyBankGold::InternalSwap(MsgDBModifyBankGold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBModifyBankGold, user_id_)
      + sizeof(MsgDBModifyBankGold::user_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDBModifyBankGold, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBModifyBankGold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBSendUserGold::_Internal {
 public:
};

MsgDBSendUserGold::MsgDBSendUserGold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBSendUserGold)
}
MsgDBSendUserGold::MsgDBSendUserGold(const MsgDBSendUserGold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&send_user_id_, &from.send_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
    reinterpret_cast<char*>(&send_user_id_)) + sizeof(gold_));
  // @@protoc_insertion_point(copy_constructor:MsgDBSendUserGold)
}

void MsgDBSendUserGold::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&send_user_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&send_user_id_)) + sizeof(gold_));
}

MsgDBSendUserGold::~MsgDBSendUserGold() {
  // @@protoc_insertion_point(destructor:MsgDBSendUserGold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBSendUserGold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBSendUserGold::ArenaDtor(void* object) {
  MsgDBSendUserGold* _this = reinterpret_cast< MsgDBSendUserGold* >(object);
  (void)_this;
}
void MsgDBSendUserGold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBSendUserGold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBSendUserGold& MsgDBSendUserGold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBSendUserGold_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBSendUserGold::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBSendUserGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&send_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gold_) -
      reinterpret_cast<char*>(&send_user_id_)) + sizeof(gold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBSendUserGold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 send_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          send_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recver_beautiful_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recver_beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBSendUserGold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBSendUserGold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 send_user_id = 1;
  if (this->send_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_send_user_id(), target);
  }

  // int32 recver_beautiful_id = 2;
  if (this->recver_beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_recver_beautiful_id(), target);
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_gold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBSendUserGold)
  return target;
}

size_t MsgDBSendUserGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBSendUserGold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 send_user_id = 1;
  if (this->send_user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_send_user_id());
  }

  // int32 recver_beautiful_id = 2;
  if (this->recver_beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recver_beautiful_id());
  }

  // int64 gold = 3;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBSendUserGold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBSendUserGold)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBSendUserGold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBSendUserGold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBSendUserGold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBSendUserGold)
    MergeFrom(*source);
  }
}

void MsgDBSendUserGold::MergeFrom(const MsgDBSendUserGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBSendUserGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.send_user_id() != 0) {
    _internal_set_send_user_id(from._internal_send_user_id());
  }
  if (from.recver_beautiful_id() != 0) {
    _internal_set_recver_beautiful_id(from._internal_recver_beautiful_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
}

void MsgDBSendUserGold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBSendUserGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBSendUserGold::CopyFrom(const MsgDBSendUserGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBSendUserGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBSendUserGold::IsInitialized() const {
  return true;
}

void MsgDBSendUserGold::InternalSwap(MsgDBSendUserGold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBSendUserGold, gold_)
      + sizeof(MsgDBSendUserGold::gold_)
      - PROTOBUF_FIELD_OFFSET(MsgDBSendUserGold, send_user_id_)>(
          reinterpret_cast<char*>(&send_user_id_),
          reinterpret_cast<char*>(&other->send_user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBSendUserGold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBMail::_Internal {
 public:
};

MsgDBMail::MsgDBMail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBMail)
}
MsgDBMail::MsgDBMail(const MsgDBMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mail_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail_title().empty()) {
    mail_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mail_title(), 
      GetArena());
  }
  mail_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mail_content().empty()) {
    mail_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mail_content(), 
      GetArena());
  }
  ::memcpy(&mail_guid_, &from.mail_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_custom_) -
    reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
  // @@protoc_insertion_point(copy_constructor:MsgDBMail)
}

void MsgDBMail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBMail_ServerInternalProto_2eproto.base);
  mail_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&mail_guid_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
}

MsgDBMail::~MsgDBMail() {
  // @@protoc_insertion_point(destructor:MsgDBMail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBMail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mail_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mail_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBMail::ArenaDtor(void* object) {
  MsgDBMail* _this = reinterpret_cast< MsgDBMail* >(object);
  (void)_this;
}
void MsgDBMail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBMail& MsgDBMail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBMail_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBMail::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mail_title_.ClearToEmpty();
  mail_content_.ClearToEmpty();
  ::memset(&mail_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_custom_) -
      reinterpret_cast<char*>(&mail_guid_)) + sizeof(is_custom_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBMail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mail_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mail_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mail_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mail_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recver_beautiful_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          recver_beautiful_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mail_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBMail.mail_title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mail_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mail_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBMail.mail_content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 gold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 send_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_custom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBMail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBMail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mail_guid = 1;
  if (this->mail_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mail_guid(), target);
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mail_id(), target);
  }

  // int32 sender_id = 3;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sender_id(), target);
  }

  // int32 recver_beautiful_id = 4;
  if (this->recver_beautiful_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_recver_beautiful_id(), target);
  }

  // string mail_title = 5;
  if (this->mail_title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail_title().data(), static_cast<int>(this->_internal_mail_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBMail.mail_title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mail_title(), target);
  }

  // string mail_content = 6;
  if (this->mail_content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail_content().data(), static_cast<int>(this->_internal_mail_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBMail.mail_content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mail_content(), target);
  }

  // int64 gold = 7;
  if (this->gold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_gold(), target);
  }

  // int64 send_time = 8;
  if (this->send_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_send_time(), target);
  }

  // int32 is_custom = 9;
  if (this->is_custom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_is_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBMail)
  return target;
}

size_t MsgDBMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBMail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mail_title = 5;
  if (this->mail_title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail_title());
  }

  // string mail_content = 6;
  if (this->mail_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail_content());
  }

  // int32 mail_guid = 1;
  if (this->mail_guid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_guid());
  }

  // int32 mail_id = 2;
  if (this->mail_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mail_id());
  }

  // int32 sender_id = 3;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // int32 recver_beautiful_id = 4;
  if (this->recver_beautiful_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recver_beautiful_id());
  }

  // int64 gold = 7;
  if (this->gold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_gold());
  }

  // int64 send_time = 8;
  if (this->send_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_send_time());
  }

  // int32 is_custom = 9;
  if (this->is_custom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_custom());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBMail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBMail)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBMail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBMail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBMail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBMail)
    MergeFrom(*source);
  }
}

void MsgDBMail::MergeFrom(const MsgDBMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mail_title().size() > 0) {
    _internal_set_mail_title(from._internal_mail_title());
  }
  if (from.mail_content().size() > 0) {
    _internal_set_mail_content(from._internal_mail_content());
  }
  if (from.mail_guid() != 0) {
    _internal_set_mail_guid(from._internal_mail_guid());
  }
  if (from.mail_id() != 0) {
    _internal_set_mail_id(from._internal_mail_id());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.recver_beautiful_id() != 0) {
    _internal_set_recver_beautiful_id(from._internal_recver_beautiful_id());
  }
  if (from.gold() != 0) {
    _internal_set_gold(from._internal_gold());
  }
  if (from.send_time() != 0) {
    _internal_set_send_time(from._internal_send_time());
  }
  if (from.is_custom() != 0) {
    _internal_set_is_custom(from._internal_is_custom());
  }
}

void MsgDBMail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBMail::CopyFrom(const MsgDBMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBMail::IsInitialized() const {
  return true;
}

void MsgDBMail::InternalSwap(MsgDBMail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mail_title_.Swap(&other->mail_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mail_content_.Swap(&other->mail_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDBMail, is_custom_)
      + sizeof(MsgDBMail::is_custom_)
      - PROTOBUF_FIELD_OFFSET(MsgDBMail, mail_guid_)>(
          reinterpret_cast<char*>(&mail_guid_),
          reinterpret_cast<char*>(&other->mail_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBMail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBRegisterGame::_Internal {
 public:
};

MsgDBRegisterGame::MsgDBRegisterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBRegisterGame)
}
MsgDBRegisterGame::MsgDBRegisterGame(const MsgDBRegisterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_name().empty()) {
    server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_name(), 
      GetArena());
  }
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:MsgDBRegisterGame)
}

void MsgDBRegisterGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base);
  server_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_ = 0;
}

MsgDBRegisterGame::~MsgDBRegisterGame() {
  // @@protoc_insertion_point(destructor:MsgDBRegisterGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBRegisterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  server_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgDBRegisterGame::ArenaDtor(void* object) {
  MsgDBRegisterGame* _this = reinterpret_cast< MsgDBRegisterGame* >(object);
  (void)_this;
}
void MsgDBRegisterGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBRegisterGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBRegisterGame& MsgDBRegisterGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBRegisterGame_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBRegisterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBRegisterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_name_.ClearToEmpty();
  server_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBRegisterGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MsgDBRegisterGame.server_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBRegisterGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBRegisterGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_name().data(), static_cast<int>(this->_internal_server_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MsgDBRegisterGame.server_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBRegisterGame)
  return target;
}

size_t MsgDBRegisterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBRegisterGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_name = 2;
  if (this->server_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_name());
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBRegisterGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBRegisterGame)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBRegisterGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBRegisterGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBRegisterGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBRegisterGame)
    MergeFrom(*source);
  }
}

void MsgDBRegisterGame::MergeFrom(const MsgDBRegisterGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBRegisterGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_name().size() > 0) {
    _internal_set_server_name(from._internal_server_name());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void MsgDBRegisterGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBRegisterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBRegisterGame::CopyFrom(const MsgDBRegisterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBRegisterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBRegisterGame::IsInitialized() const {
  return true;
}

void MsgDBRegisterGame::InternalSwap(MsgDBRegisterGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  server_name_.Swap(&other->server_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBRegisterGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgDBLoadRobot::_Internal {
 public:
};

MsgDBLoadRobot::MsgDBLoadRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgDBLoadRobot)
}
MsgDBLoadRobot::MsgDBLoadRobot(const MsgDBLoadRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MsgDBLoadRobot)
}

void MsgDBLoadRobot::SharedCtor() {
}

MsgDBLoadRobot::~MsgDBLoadRobot() {
  // @@protoc_insertion_point(destructor:MsgDBLoadRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgDBLoadRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgDBLoadRobot::ArenaDtor(void* object) {
  MsgDBLoadRobot* _this = reinterpret_cast< MsgDBLoadRobot* >(object);
  (void)_this;
}
void MsgDBLoadRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgDBLoadRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgDBLoadRobot& MsgDBLoadRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgDBLoadRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgDBLoadRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgDBLoadRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDBLoadRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgDBLoadRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgDBLoadRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 user_id = 1;
  {
    int byte_size = _user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_user_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgDBLoadRobot)
  return target;
}

size_t MsgDBLoadRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgDBLoadRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 user_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgDBLoadRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgDBLoadRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgDBLoadRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgDBLoadRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgDBLoadRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgDBLoadRobot)
    MergeFrom(*source);
  }
}

void MsgDBLoadRobot::MergeFrom(const MsgDBLoadRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgDBLoadRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
}

void MsgDBLoadRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgDBLoadRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDBLoadRobot::CopyFrom(const MsgDBLoadRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgDBLoadRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDBLoadRobot::IsInitialized() const {
  return true;
}

void MsgDBLoadRobot::InternalSwap(MsgDBLoadRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.InternalSwap(&other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDBLoadRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCreateRobot::_Internal {
 public:
};

MsgCreateRobot::MsgCreateRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCreateRobot)
}
MsgCreateRobot::MsgCreateRobot(const MsgCreateRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  // @@protoc_insertion_point(copy_constructor:MsgCreateRobot)
}

void MsgCreateRobot::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
}

MsgCreateRobot::~MsgCreateRobot() {
  // @@protoc_insertion_point(destructor:MsgCreateRobot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCreateRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCreateRobot::ArenaDtor(void* object) {
  MsgCreateRobot* _this = reinterpret_cast< MsgCreateRobot* >(object);
  (void)_this;
}
void MsgCreateRobot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCreateRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCreateRobot& MsgCreateRobot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCreateRobot_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgCreateRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCreateRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateRobot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 generate_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          generate_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCreateRobot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreateRobot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // int32 generate_num = 2;
  if (this->generate_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_generate_num(), target);
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreateRobot)
  return target;
}

size_t MsgCreateRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCreateRobot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 generate_num = 2;
  if (this->generate_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_generate_num());
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_socket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCreateRobot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCreateRobot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCreateRobot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCreateRobot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCreateRobot)
    MergeFrom(*source);
  }
}

void MsgCreateRobot::MergeFrom(const MsgCreateRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCreateRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.generate_num() != 0) {
    _internal_set_generate_num(from._internal_generate_num());
  }
  if (from.client_socket_id() != 0) {
    _internal_set_client_socket_id(from._internal_client_socket_id());
  }
}

void MsgCreateRobot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRobot::CopyFrom(const MsgCreateRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCreateRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRobot::IsInitialized() const {
  return true;
}

void MsgCreateRobot::InternalSwap(MsgCreateRobot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCreateRobot, client_socket_id_)
      + sizeof(MsgCreateRobot::client_socket_id_)
      - PROTOBUF_FIELD_OFFSET(MsgCreateRobot, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateRobot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MsgCreateRobotResp::_Internal {
 public:
};

MsgCreateRobotResp::MsgCreateRobotResp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  user_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgCreateRobotResp)
}
MsgCreateRobotResp::MsgCreateRobotResp(const MsgCreateRobotResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      user_id_(from.user_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  // @@protoc_insertion_point(copy_constructor:MsgCreateRobotResp)
}

void MsgCreateRobotResp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
}

MsgCreateRobotResp::~MsgCreateRobotResp() {
  // @@protoc_insertion_point(destructor:MsgCreateRobotResp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgCreateRobotResp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MsgCreateRobotResp::ArenaDtor(void* object) {
  MsgCreateRobotResp* _this = reinterpret_cast< MsgCreateRobotResp* >(object);
  (void)_this;
}
void MsgCreateRobotResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgCreateRobotResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgCreateRobotResp& MsgCreateRobotResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgCreateRobotResp_ServerInternalProto_2eproto.base);
  return *internal_default_instance();
}


void MsgCreateRobotResp::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgCreateRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_socket_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(client_socket_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateRobotResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_user_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_user_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_socket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_socket_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgCreateRobotResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgCreateRobotResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  // repeated int32 user_id = 2;
  {
    int byte_size = _user_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_user_id(), byte_size, target);
    }
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_socket_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgCreateRobotResp)
  return target;
}

size_t MsgCreateRobotResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgCreateRobotResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 user_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _user_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_id());
  }

  // int32 client_socket_id = 3;
  if (this->client_socket_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_socket_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgCreateRobotResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgCreateRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCreateRobotResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgCreateRobotResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgCreateRobotResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgCreateRobotResp)
    MergeFrom(*source);
  }
}

void MsgCreateRobotResp::MergeFrom(const MsgCreateRobotResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgCreateRobotResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.client_socket_id() != 0) {
    _internal_set_client_socket_id(from._internal_client_socket_id());
  }
}

void MsgCreateRobotResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgCreateRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRobotResp::CopyFrom(const MsgCreateRobotResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgCreateRobotResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRobotResp::IsInitialized() const {
  return true;
}

void MsgCreateRobotResp::InternalSwap(MsgCreateRobotResp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.InternalSwap(&other->user_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCreateRobotResp, client_socket_id_)
      + sizeof(MsgCreateRobotResp::client_socket_id_)
      - PROTOBUF_FIELD_OFFSET(MsgCreateRobotResp, server_id_)>(
          reinterpret_cast<char*>(&server_id_),
          reinterpret_cast<char*>(&other->server_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateRobotResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MsgRegisterLoginServer* Arena::CreateMaybeMessage< ::MsgRegisterLoginServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRegisterLoginServer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgRegisterGameServer* Arena::CreateMaybeMessage< ::MsgRegisterGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgRegisterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgApplyRobot* Arena::CreateMaybeMessage< ::MsgApplyRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgApplyRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgApplyRobotResp* Arena::CreateMaybeMessage< ::MsgApplyRobotResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgApplyRobotResp >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBUpdateOnlineNum* Arena::CreateMaybeMessage< ::MsgDBUpdateOnlineNum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBUpdateOnlineNum >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBRegisterLogin* Arena::CreateMaybeMessage< ::MsgDBRegisterLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBRegisterLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgPlayerAttribute* Arena::CreateMaybeMessage< ::MsgPlayerAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgPlayerAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgLoginPlayerInfo* Arena::CreateMaybeMessage< ::MsgLoginPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgLoginPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgGamePlayerInfo* Arena::CreateMaybeMessage< ::MsgGamePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgGamePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBLoginOut* Arena::CreateMaybeMessage< ::MsgDBLoginOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBLoginOut >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBUpdatePlayerInfo* Arena::CreateMaybeMessage< ::MsgDBUpdatePlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBUpdatePlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBMailData* Arena::CreateMaybeMessage< ::MsgDBMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBModifyBankGold* Arena::CreateMaybeMessage< ::MsgDBModifyBankGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBModifyBankGold >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBSendUserGold* Arena::CreateMaybeMessage< ::MsgDBSendUserGold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBSendUserGold >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBMail* Arena::CreateMaybeMessage< ::MsgDBMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBMail >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBRegisterGame* Arena::CreateMaybeMessage< ::MsgDBRegisterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBRegisterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgDBLoadRobot* Arena::CreateMaybeMessage< ::MsgDBLoadRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgDBLoadRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCreateRobot* Arena::CreateMaybeMessage< ::MsgCreateRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCreateRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::MsgCreateRobotResp* Arena::CreateMaybeMessage< ::MsgCreateRobotResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgCreateRobotResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
