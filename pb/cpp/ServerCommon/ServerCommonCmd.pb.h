// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerCommonCmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServerCommonCmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServerCommonCmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerCommonCmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerCommonCmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServerCommonCmd_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

enum EMsgIDServerMain : int {
  MsgIDServerMain_Null = 0,
  LOGIN_TO_CENTER_SERVER_MANAGER = 1,
  EMsgIDServerMain_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDServerMain_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDServerMain_IsValid(int value);
constexpr EMsgIDServerMain EMsgIDServerMain_MIN = MsgIDServerMain_Null;
constexpr EMsgIDServerMain EMsgIDServerMain_MAX = LOGIN_TO_CENTER_SERVER_MANAGER;
constexpr int EMsgIDServerMain_ARRAYSIZE = EMsgIDServerMain_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDServerMain_descriptor();
template<typename T>
inline const std::string& EMsgIDServerMain_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDServerMain>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDServerMain_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDServerMain_descriptor(), enum_t_value);
}
inline bool EMsgIDServerMain_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDServerMain* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDServerMain>(
    EMsgIDServerMain_descriptor(), name, value);
}
enum EMsgIDServerInternalProto : int {
  SERVER_INTERNAL_NULL = 0,
  LOGIN2CENTER_REGISTER = 1,
  LOGIN2CENTER_UPDATE_ONLINE_NUM = 2,
  EMsgIDServerInternalProto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDServerInternalProto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDServerInternalProto_IsValid(int value);
constexpr EMsgIDServerInternalProto EMsgIDServerInternalProto_MIN = SERVER_INTERNAL_NULL;
constexpr EMsgIDServerInternalProto EMsgIDServerInternalProto_MAX = LOGIN2CENTER_UPDATE_ONLINE_NUM;
constexpr int EMsgIDServerInternalProto_ARRAYSIZE = EMsgIDServerInternalProto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDServerInternalProto_descriptor();
template<typename T>
inline const std::string& EMsgIDServerInternalProto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDServerInternalProto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDServerInternalProto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDServerInternalProto_descriptor(), enum_t_value);
}
inline bool EMsgIDServerInternalProto_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDServerInternalProto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDServerInternalProto>(
    EMsgIDServerInternalProto_descriptor(), name, value);
}
enum EMsgIDDB : int {
  MsgIDDB_NULL = 0,
  CENTER_SERVER2DB_UPDATE_ONLINE_NUM = 1,
  CENTER_SERVER2DB_INIT_ONLINE_NUM = 2,
  CENTER_SERVER2DB_REGISTER_LOGIN = 3,
  CENTER_SERVER2DB_UNREGISTER_LOGIN = 4,
  LOGIN_SERVER2DB_LOGIN = 1001,
  DB2LOGIN_SERVER_LOGIN = 1002,
  DB2LOGIN_LOAD_PLAYER_DATA = 1003,
  EMsgIDDB_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EMsgIDDB_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EMsgIDDB_IsValid(int value);
constexpr EMsgIDDB EMsgIDDB_MIN = MsgIDDB_NULL;
constexpr EMsgIDDB EMsgIDDB_MAX = DB2LOGIN_LOAD_PLAYER_DATA;
constexpr int EMsgIDDB_ARRAYSIZE = EMsgIDDB_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMsgIDDB_descriptor();
template<typename T>
inline const std::string& EMsgIDDB_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMsgIDDB>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMsgIDDB_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMsgIDDB_descriptor(), enum_t_value);
}
inline bool EMsgIDDB_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMsgIDDB* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMsgIDDB>(
    EMsgIDDB_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EMsgIDServerMain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMsgIDServerMain>() {
  return ::EMsgIDServerMain_descriptor();
}
template <> struct is_proto_enum< ::EMsgIDServerInternalProto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMsgIDServerInternalProto>() {
  return ::EMsgIDServerInternalProto_descriptor();
}
template <> struct is_proto_enum< ::EMsgIDDB> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMsgIDDB>() {
  return ::EMsgIDDB_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServerCommonCmd_2eproto
