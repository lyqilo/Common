//THIS FILE IS GENERATED BY MARFU, DO NOT EDIT IT!
using System;
using System.Text;
using System.Collections.Generic;
namespace Rof
{
public class RofLaunchConfigRow
{
public int ID { get; private set; }
public List<string> DNS { get; private set; }
public string CdnDirectoryName { get; private set; }
public string Auth { get; private set; }
public string LaunchPackageName { get; private set; }
public string LobbyPackageName { get; private set; }
public string GamePackageName { get; private set; }
public string ScriptResName { get; private set; }
public string LaunchResName { get; private set; }
public string VideoName { get; private set; }
public int ReadBody(byte[] rData, int nOffset)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.ID = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
this.DNS = new List<string>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nDNSLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
string DNSTempBuf = Encoding.UTF8.GetString(rData, nOffset, nDNSLen); nOffset += nDNSLen;
string[] DNSElements = DNSTempBuf.Split(',');
foreach(string item in DNSElements)
{
this.DNS.Add(item);}
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nCdnDirectoryNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.CdnDirectoryName = Encoding.UTF8.GetString(rData, nOffset, nCdnDirectoryNameLen); nOffset += nCdnDirectoryNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nAuthLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.Auth = Encoding.UTF8.GetString(rData, nOffset, nAuthLen); nOffset += nAuthLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nLaunchPackageNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.LaunchPackageName = Encoding.UTF8.GetString(rData, nOffset, nLaunchPackageNameLen); nOffset += nLaunchPackageNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nLobbyPackageNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.LobbyPackageName = Encoding.UTF8.GetString(rData, nOffset, nLobbyPackageNameLen); nOffset += nLobbyPackageNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nGamePackageNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.GamePackageName = Encoding.UTF8.GetString(rData, nOffset, nGamePackageNameLen); nOffset += nGamePackageNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nScriptResNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.ScriptResName = Encoding.UTF8.GetString(rData, nOffset, nScriptResNameLen); nOffset += nScriptResNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nLaunchResNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.LaunchResName = Encoding.UTF8.GetString(rData, nOffset, nLaunchResNameLen); nOffset += nLaunchResNameLen;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nVideoNameLen = (int)BitConverter.ToUInt32(rData, nOffset); nOffset += 4;
this.VideoName = Encoding.UTF8.GetString(rData, nOffset, nVideoNameLen); nOffset += nVideoNameLen;
return nOffset;
}
}
public class RofLaunchConfigTable
{
private int mRowNum;
private Dictionary<int, RofLaunchConfigRow> mIDMap;
private Dictionary<int, int> mRowMap;
public int RowNum { get { return this.mRowNum; } }
public void Init(byte[] rTotalBuffer)
{
mIDMap = new Dictionary<int, RofLaunchConfigRow>();
this.mRowMap = new Dictionary<int, int>();
int nOffset = 0;
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
this.mRowNum = BitConverter.ToInt32(rTotalBuffer, nOffset); nOffset += 4;
for (int i = 0; i < this.mRowNum; i++)
{
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
int nID = BitConverter.ToInt32(rTotalBuffer, nOffset);
RofLaunchConfigRow rModel = new RofLaunchConfigRow();
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
nOffset = rModel.ReadBody(rTotalBuffer, nOffset);
this.mIDMap.Add(nID, rModel);
this.mRowMap.Add(i, nID);
}
}
public RofLaunchConfigRow GetDataByID(int nID)
{
if (this.mIDMap.ContainsKey(nID) == false)
{
return null;
}
return this.mIDMap[nID];
}
public RofLaunchConfigRow GetDataByRow(int nIndex)
{
if (mRowMap.ContainsKey(nIndex) == false)
{
return null;
}
int nID = mRowMap[nIndex];
return mIDMap[nID];
}
}
}
