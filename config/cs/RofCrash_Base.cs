//THIS FILE IS GENERATED BY MARFU, DO NOT EDIT IT!
using System;
using System.Text;
using System.Collections.Generic;
namespace Rof
{
public class RofCrash_BaseRow
{
public int ID { get; private set; }
public List<int> Bet { get; private set; }
public List<int> RobotBetPro { get; private set; }
public List<int> Dot { get; private set; }
public List<int> BezierA { get; private set; }
public List<int> BezierB { get; private set; }
public List<int> BezierC { get; private set; }
public int MaxBet { get; private set; }
public int BetTime { get; private set; }
public int ResultTime { get; private set; }
public int GameTime { get; private set; }
public int ReadBody(byte[] rData, int nOffset)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.ID = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
this.Bet = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nBetLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nBetLen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.Bet.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
this.RobotBetPro = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nRobotBetProLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nRobotBetProLen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.RobotBetPro.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
this.Dot = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nDotLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nDotLen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.Dot.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
this.BezierA = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nBezierALen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nBezierALen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.BezierA.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
this.BezierB = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nBezierBLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nBezierBLen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.BezierB.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
this.BezierC = new List<int>();
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
int nBezierCLen = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
for (int i = 0; i < nBezierCLen; i++)
{
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.BezierC.Add(BitConverter.ToInt32(rData, nOffset)); nOffset += 4;
}
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.MaxBet = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.BetTime = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.ResultTime = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
if (BitConverter.IsLittleEndian){Array.Reverse(rData, nOffset, 4);}
this.GameTime = BitConverter.ToInt32(rData, nOffset); nOffset += 4;
return nOffset;
}
}
public class RofCrash_BaseTable
{
private int mRowNum;
private Dictionary<int, RofCrash_BaseRow> mIDMap;
private Dictionary<int, int> mRowMap;
public int RowNum { get { return this.mRowNum; } }
public void Init(byte[] rTotalBuffer)
{
mIDMap = new Dictionary<int, RofCrash_BaseRow>();
this.mRowMap = new Dictionary<int, int>();
int nOffset = 0;
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
this.mRowNum = BitConverter.ToInt32(rTotalBuffer, nOffset); nOffset += 4;
for (int i = 0; i < this.mRowNum; i++)
{
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
int nID = BitConverter.ToInt32(rTotalBuffer, nOffset);
RofCrash_BaseRow rModel = new RofCrash_BaseRow();
if (BitConverter.IsLittleEndian) { Array.Reverse(rTotalBuffer, nOffset, 4); }
nOffset = rModel.ReadBody(rTotalBuffer, nOffset);
this.mIDMap.Add(nID, rModel);
this.mRowMap.Add(i, nID);
}
}
public RofCrash_BaseRow GetDataByID(int nID)
{
if (this.mIDMap.ContainsKey(nID) == false)
{
return null;
}
return this.mIDMap[nID];
}
public RofCrash_BaseRow GetDataByRow(int nIndex)
{
if (mRowMap.ContainsKey(nIndex) == false)
{
return null;
}
int nID = mRowMap[nIndex];
return mIDMap[nID];
}
}
}
