//THIS FILE IS GENERATED BY MARFU, DO NOT EDIT IT!
#pragma once
#include "RofDefine.h"

struct sRofExampleRow
{
int32_t ID;
int32_t Value1;
int64_t Value2;
float Value3;
double Value4;
std::string Value5;
int32_t Value6;
std::vector<int32_t> Value7;
std::vector<int64_t> Value8;
std::vector<float> Value9;
std::vector<double> Value10;
std::vector<std::string> Value11;
std::vector<NNKV> Value12;
NNKV Value13;
void ReadBody(char aBuffer[],int& aOffset)
{
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
ID = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value1 = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
Value2 = ToInt64(aBuffer, aOffset); aOffset += 8;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value3 = ToSingle(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
Value4 = ToDouble(aBuffer, aOffset); aOffset += 8;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue5Len = ToInt32(aBuffer, aOffset); aOffset += 4;
Value5 = ToString(aBuffer, aOffset, nValue5Len); aOffset += nValue5Len;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value6 = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue7Len = ToInt32(aBuffer, aOffset); aOffset += 4;
for (int i = 0; i < nValue7Len; i++)
{
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value7.push_back(ToInt32(aBuffer, aOffset)); aOffset += 4;
}
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue8Len = ToInt32(aBuffer, aOffset);aOffset += 4;
for (int i = 0; i < nValue8Len; i++)
{
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
Value8.push_back(ToInt64(aBuffer, aOffset)); aOffset += 8;
}
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue9Len = ToInt32(aBuffer, aOffset); aOffset += 4;
for (int i = 0; i < nValue9Len; i++)
{
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value9.push_back(ToSingle(aBuffer, aOffset)); aOffset += 4;
}
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue10Len = ToInt32(aBuffer, aOffset); aOffset += 4;
for (int i = 0; i < nValue10Len; i++)
{
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
Value10.push_back(ToDouble(aBuffer, aOffset)); aOffset += 8;
}
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue11Len = ToInt32(aBuffer, aOffset); aOffset += 4;
std::string Value11TmpBuf = ToString(aBuffer, aOffset, nValue11Len); aOffset += nValue11Len;
Value11 = split(Value11TmpBuf, ",");
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nValue12Len = ToInt32(aBuffer, aOffset); aOffset += 4;
for (int i = 0; i < nValue12Len; i++)
{
NNKV rNNKV;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
rNNKV.k = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
rNNKV.v = ToDouble(aBuffer, aOffset); aOffset += 8;
Value12.push_back(rNNKV);
}
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
Value13.k = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 8);
Value13.v = ToDouble(aBuffer, aOffset); aOffset += 8;
}
};
struct sRofExampleTable
{
private:
int32_t mRowNum;
std::map<int32_t, sRofExampleRow> mIDMap;
std::map<int32_t, int32_t> mRowMap;
public:
int GetRowNum(){ return mRowNum; }
void Init(char aBuf[])
{
int nOffset = 0;
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
mRowNum = ToInt32(aBuf, nOffset); nOffset += 4;
for (int i = 0; i < mRowNum; i++)
{
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
int nID = ToInt32(aBuf, nOffset);
sRofExampleRow rModel;
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
rModel.ReadBody(aBuf, nOffset);
mIDMap[nID] = rModel;
mRowMap[i] = nID;
}
}
sRofExampleRow* GetDataByID(int aID)
{
std::map<int, sRofExampleRow>::iterator pIter = mIDMap.find(aID);
if (pIter == mIDMap.end())
{
return nullptr;
}
return &pIter->second;
}
sRofExampleRow* GetDataByRow(int aIndex)
{
std::map<int, int>::iterator pIter = mRowMap.find(aIndex);
if (pIter == mRowMap.end())
{
return nullptr;
}
int nID = mRowMap[aIndex];
return &mIDMap[nID];
}
};
