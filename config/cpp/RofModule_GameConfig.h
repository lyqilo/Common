//THIS FILE IS GENERATED BY MARFU, DO NOT EDIT IT!
#pragma once
#include "RofDefine.h"

struct sRofModule_GameConfigRow
{
int ID;
std::string scenName;
std::string uiName;
std::string gameName;
int clientId;
int otherClientId;
std::vector<std::string> BL;
std::string Orientation;
std::string StartScriptName;
std::string rootName;
std::string luaPath;
std::string luaRootName;
std::string driveType;
std::vector<std::string> downFiles;
void ReadBody(char aBuffer[],int& aOffset)
{
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
ID = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nscenNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
scenName = ToString(aBuffer, aOffset, nscenNameLen); aOffset += nscenNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nuiNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
uiName = ToString(aBuffer, aOffset, nuiNameLen); aOffset += nuiNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int ngameNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
gameName = ToString(aBuffer, aOffset, ngameNameLen); aOffset += ngameNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
clientId = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
otherClientId = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nBLLen = ToInt32(aBuffer, aOffset); aOffset += 4;
std::string BLTmpBuf = ToString(aBuffer, aOffset, nBLLen); aOffset += nBLLen;
BL = split(BLTmpBuf, ",");
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nOrientationLen = ToInt32(aBuffer, aOffset); aOffset += 4;
Orientation = ToString(aBuffer, aOffset, nOrientationLen); aOffset += nOrientationLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nStartScriptNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
StartScriptName = ToString(aBuffer, aOffset, nStartScriptNameLen); aOffset += nStartScriptNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nrootNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
rootName = ToString(aBuffer, aOffset, nrootNameLen); aOffset += nrootNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nluaPathLen = ToInt32(aBuffer, aOffset); aOffset += 4;
luaPath = ToString(aBuffer, aOffset, nluaPathLen); aOffset += nluaPathLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nluaRootNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
luaRootName = ToString(aBuffer, aOffset, nluaRootNameLen); aOffset += nluaRootNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int ndriveTypeLen = ToInt32(aBuffer, aOffset); aOffset += 4;
driveType = ToString(aBuffer, aOffset, ndriveTypeLen); aOffset += ndriveTypeLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int ndownFilesLen = ToInt32(aBuffer, aOffset); aOffset += 4;
std::string downFilesTmpBuf = ToString(aBuffer, aOffset, ndownFilesLen); aOffset += ndownFilesLen;
downFiles = split(downFilesTmpBuf, ",");
}
};
struct sRofModule_GameConfigTable
{
private:
int mRowNum;
std::map<int, sRofModule_GameConfigRow> mIDMap;
std::map<int, int> mRowMap;
public:
int GetRowNum(){ return mRowNum; }
void Init(char aBuf[])
{
int nOffset = 0;
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
mRowNum = ToInt32(aBuf, nOffset); nOffset += 4;
for (int i = 0; i < mRowNum; i++)
{
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
int nID = ToInt32(aBuf, nOffset);
sRofModule_GameConfigRow rModel;
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
rModel.ReadBody(aBuf, nOffset);
mIDMap[nID] = rModel;
mRowMap[i] = nID;
}
}
sRofModule_GameConfigRow* GetDataByID(int aID)
{
std::map<int, sRofModule_GameConfigRow>::iterator pIter = mIDMap.find(aID);
if (pIter == mIDMap.end())
{
return NULL;
}
return &pIter->second;
}
sRofModule_GameConfigRow* GetDataByRow(int aIndex)
{
std::map<int, int>::iterator pIter = mRowMap.find(aIndex);
if (pIter == mRowMap.end())
{
return NULL;
}
int nID = mRowMap[aIndex];
return &mIDMap[nID];
}
};
