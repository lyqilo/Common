//THIS FILE IS GENERATED BY marfu, DO NOT EDIT IT!
#pragma once
#include <vector>
#include <map>
struct NNKV
{
int k;
double v;
int GetKey() { return k; }
double GetValue() { return v; }
};
static bool IsLittleEndian()
{
int nValue = 1;
char*p = (char*)&nValue;
if (*p == 1) return true;
else return false;
}
static void Reverse(char aData[], int aOffset, int aLen)
{
for (int i = 0; i < aLen / 2; i++)
{
char c = aData[aOffset + i];
char tmp = aData[aOffset + aLen - i - 1];
aData[aOffset + i] = tmp;
aData[aOffset + aLen - i - 1] = c;
}
}
static int ToInt32(char aData[], int aOffset)
{
int nValue;
memcpy(&nValue, (int*)(aData + aOffset), 4);
return nValue;
}
static long long ToInt64(char aData[], int aOffset)
{
long long nValue;
memcpy(&nValue, (long long*)(aData + aOffset), 8);
return nValue;
}
static float ToSingle(char aData[], int aOffset)
{
float nValue;
memcpy(&nValue, (float*)(aData + aOffset), 4);
return nValue;
}
static double ToDouble(char aData[], int aOffset)
{
double nValue;
memcpy(&nValue, (double*)(aData + aOffset), 8);
return nValue;
}
static std::string ToString(char aData[], int aOffset,int aLen)
{
std::string strValue((char*)aData + aOffset, aLen);
return strValue;
}
static std::vector<std::string> split(const std::string& str, const std::string& delim) {
std::vector<std::string> res;
if ("" == str) return res;
char * strs = new char[str.length() + 1];
strcpy(strs, str.c_str());
char * d = new char[delim.length() + 1];
strcpy(d, delim.c_str());
char *p = strtok(strs, d);
while (p) {
std::string s = p;
res.push_back(s);
p = strtok(NULL, d);
}
return res;
}
