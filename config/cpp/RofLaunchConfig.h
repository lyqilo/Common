//THIS FILE IS GENERATED BY MARFU, DO NOT EDIT IT!
#pragma once
#include "RofDefine.h"

struct sRofLaunchConfigRow
{
int32_t ID;
std::vector<std::string> DNS;
std::string CdnDirectoryName;
std::string Auth;
std::string LaunchPackageName;
std::string LobbyPackageName;
std::string GamePackageName;
std::string ScriptResName;
std::string LaunchResName;
std::string VideoName;
void ReadBody(char aBuffer[],int& aOffset)
{
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
ID = ToInt32(aBuffer, aOffset); aOffset += 4;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nDNSLen = ToInt32(aBuffer, aOffset); aOffset += 4;
std::string DNSTmpBuf = ToString(aBuffer, aOffset, nDNSLen); aOffset += nDNSLen;
DNS = split(DNSTmpBuf, ",");
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nCdnDirectoryNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
CdnDirectoryName = ToString(aBuffer, aOffset, nCdnDirectoryNameLen); aOffset += nCdnDirectoryNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nAuthLen = ToInt32(aBuffer, aOffset); aOffset += 4;
Auth = ToString(aBuffer, aOffset, nAuthLen); aOffset += nAuthLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nLaunchPackageNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
LaunchPackageName = ToString(aBuffer, aOffset, nLaunchPackageNameLen); aOffset += nLaunchPackageNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nLobbyPackageNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
LobbyPackageName = ToString(aBuffer, aOffset, nLobbyPackageNameLen); aOffset += nLobbyPackageNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nGamePackageNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
GamePackageName = ToString(aBuffer, aOffset, nGamePackageNameLen); aOffset += nGamePackageNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nScriptResNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
ScriptResName = ToString(aBuffer, aOffset, nScriptResNameLen); aOffset += nScriptResNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nLaunchResNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
LaunchResName = ToString(aBuffer, aOffset, nLaunchResNameLen); aOffset += nLaunchResNameLen;
if (bIsLittleEndian) Reverse(aBuffer, aOffset, 4);
int nVideoNameLen = ToInt32(aBuffer, aOffset); aOffset += 4;
VideoName = ToString(aBuffer, aOffset, nVideoNameLen); aOffset += nVideoNameLen;
}
};
struct sRofLaunchConfigTable
{
private:
int32_t mRowNum;
std::map<int32_t, sRofLaunchConfigRow> mIDMap;
std::map<int32_t, int32_t> mRowMap;
public:
int GetRowNum(){ return mRowNum; }
void Init(char aBuf[])
{
int nOffset = 0;
bool bIsLittleEndian = IsLittleEndian();
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
mRowNum = ToInt32(aBuf, nOffset); nOffset += 4;
for (int i = 0; i < mRowNum; i++)
{
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
int nID = ToInt32(aBuf, nOffset);
sRofLaunchConfigRow rModel;
if (bIsLittleEndian) Reverse(aBuf, nOffset, 4);
rModel.ReadBody(aBuf, nOffset);
mIDMap[nID] = rModel;
mRowMap[i] = nID;
}
}
sRofLaunchConfigRow* GetDataByID(int aID)
{
std::map<int, sRofExampleRow>::iterator pIter = mIDMap.find(aID);
if (pIter == mIDMap.end())
{
return nullptr;
}
return &pIter->second;
}
sRofLaunchConfigRow* GetDataByRow(int aIndex)
{
std::map<int, int>::iterator pIter = mRowMap.find(aIndex);
if (pIter == mRowMap.end())
{
return nullptr;
}
int nID = mRowMap[aIndex];
return &mIDMap[nID];
}
};
